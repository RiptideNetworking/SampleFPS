<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RiptideNetworking</name>
    </assembly>
    <members>
        <member name="T:Riptide.Client">
            <summary>A client that can connect to a <see cref="T:Riptide.Server"/>.</summary>
        </member>
        <member name="E:Riptide.Client.Connected">
            <summary>Invoked when a connection to the server is established.</summary>
        </member>
        <member name="E:Riptide.Client.ConnectionFailed">
            <summary>Invoked when a connection to the server fails to be established.</summary>
        </member>
        <member name="E:Riptide.Client.MessageReceived">
            <summary>Invoked when a message is received.</summary>
        </member>
        <member name="E:Riptide.Client.Disconnected">
            <summary>Invoked when disconnected from the server.</summary>
        </member>
        <member name="E:Riptide.Client.ClientConnected">
            <summary>Invoked when another <i>non-local</i> client connects.</summary>
        </member>
        <member name="E:Riptide.Client.ClientDisconnected">
            <summary>Invoked when another <i>non-local</i> client disconnects.</summary>
        </member>
        <member name="P:Riptide.Client.Id">
            <summary>The client's numeric ID.</summary>
        </member>
        <member name="P:Riptide.Client.RTT">
            <inheritdoc cref="P:Riptide.Connection.RTT"/>
        </member>
        <member name="P:Riptide.Client.SmoothRTT">
            <inheritdoc cref="P:Riptide.Connection.SmoothRTT"/>
            <remarks>This value is slower to accurately represent lasting changes in latency than <see cref="P:Riptide.Client.RTT"/>, but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency.</remarks>
        </member>
        <member name="P:Riptide.Client.TimeoutTime">
            <summary>Sets the client's <see cref="P:Riptide.Connection.TimeoutTime"/>.</summary>
        </member>
        <member name="P:Riptide.Client.IsNotConnected">
            <summary>Whether or not the client is currently <i>not</i> trying to connect, pending, nor actively connected.</summary>
        </member>
        <member name="P:Riptide.Client.IsConnecting">
            <summary>Whether or not the client is currently in the process of connecting.</summary>
        </member>
        <member name="P:Riptide.Client.IsPending">
            <summary>Whether or not the client's connection is currently pending (waiting to be accepted/rejected by the server).</summary>
        </member>
        <member name="P:Riptide.Client.IsConnected">
            <summary>Whether or not the client is currently connected.</summary>
        </member>
        <member name="P:Riptide.Client.Connection">
            <summary>The client's connection to a server.</summary>
        </member>
        <member name="T:Riptide.Client.MessageHandler">
            <summary>Encapsulates a method that handles a message from a server.</summary>
            <param name="message">The message that was received.</param>
        </member>
        <member name="F:Riptide.Client.connection">
            <inheritdoc cref="P:Riptide.Client.Connection"/>
        </member>
        <member name="F:Riptide.Client.connectionAttempts">
            <summary>How many connection attempts have been made so far.</summary>
        </member>
        <member name="F:Riptide.Client.maxConnectionAttempts">
            <summary>How many connection attempts to make before giving up.</summary>
        </member>
        <member name="F:Riptide.Client.messageHandlers">
            <inheritdoc cref="F:Riptide.Server.messageHandlers"/>
        </member>
        <member name="F:Riptide.Client.transport">
            <summary>The underlying transport's client that is used for sending and receiving data.</summary>
        </member>
        <member name="F:Riptide.Client.connectMessage">
            <summary>The message sent when connecting. May include custom data.</summary>
        </member>
        <member name="M:Riptide.Client.#ctor(Riptide.Transports.IClient,System.String)">
            <summary>Handles initial setup.</summary>
            <param name="transport">The transport to use for sending and receiving data.</param>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Client.#ctor(System.String)">
            <summary>Handles initial setup using the built-in UDP transport.</summary>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Client.ChangeTransport(Riptide.Transports.IClient)">
            <summary>Disconnects the client if it's connected and swaps out the transport it's using.</summary>
            <param name="newTransport">The new transport to use for sending and receiving data.</param>
            <remarks>This method does not automatically reconnect to the server. To continue communicating with the server, <see cref="M:Riptide.Client.Connect(System.String,System.Int32,System.Byte,Riptide.Message,System.Boolean)"/> must be called again.</remarks>
        </member>
        <member name="M:Riptide.Client.Connect(System.String,System.Int32,System.Byte,Riptide.Message,System.Boolean)">
            <summary>Attempts to connect to a server at the given host address.</summary>
            <param name="hostAddress">The host address to connect to.</param>
            <param name="maxConnectionAttempts">How many connection attempts to make before giving up.</param>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to use when building <see cref="F:Riptide.Client.messageHandlers"/>.</param>
            <param name="message">Data that should be sent to the server with the connection attempt. Use <see cref="M:Riptide.Message.Create"/> to get an empty message instance.</param>
            <param name="useMessageHandlers">Whether or not the client should use the built-in message handler system.</param>
            <remarks>
              <para>Riptide's default transport expects the host address to consist of an IP and port, separated by a colon. For example: <c>127.0.0.1:7777</c>. If you are using a different transport, check the relevant documentation for what information it requires in the host address.</para>
              <para>Setting <paramref name="useMessageHandlers"/> to <see langword="false"/> will disable the automatic detection and execution of methods with the <see cref="T:Riptide.MessageHandlerAttribute"/>, which is beneficial if you prefer to handle messages via the <see cref="E:Riptide.Client.MessageReceived"/> event.</para>
            </remarks>
            <returns><see langword="true"/> if a connection attempt will be made. <see langword="false"/> if an issue occurred (such as <paramref name="hostAddress"/> being in an invalid format) and a connection attempt will <i>not</i> be made.</returns>
        </member>
        <member name="M:Riptide.Client.SubToTransportEvents">
            <summary>Subscribes appropriate methods to the transport's events.</summary>
        </member>
        <member name="M:Riptide.Client.UnsubFromTransportEvents">
            <summary>Unsubscribes methods from all of the transport's events.</summary>
        </member>
        <member name="M:Riptide.Client.CreateMessageHandlersDictionary(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Heartbeat">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Update">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Handle(Riptide.Message,Riptide.Transports.MessageHeader,Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.Send(Riptide.Message,System.Boolean)">
            <summary>Sends a message to the server.</summary>
            <inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Client.Disconnect">
            <summary>Disconnects from the server.</summary>
        </member>
        <member name="M:Riptide.Client.Disconnect(Riptide.Connection,Riptide.DisconnectReason)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Client.LocalDisconnect(Riptide.DisconnectReason,Riptide.Message,Riptide.RejectReason)">
            <summary>Cleans up the local side of the connection.</summary>
            <param name="reason">The reason why the client has disconnected.</param>
            <param name="message">The disconnection or rejection message, potentially containing extra data to be handled externally.</param>
            <param name="rejectReason">The reason why the connection was rejected (<i>if</i> it was rejected).</param>
        </member>
        <member name="M:Riptide.Client.TransportConnected(System.Object,System.EventArgs)">
            <summary>What to do when the transport establishes a connection.</summary>
        </member>
        <member name="M:Riptide.Client.TransportConnectionFailed(System.Object,System.EventArgs)">
            <summary>What to do when the transport fails to connect.</summary>
        </member>
        <member name="M:Riptide.Client.TransportDisconnected(System.Object,Riptide.Transports.DisconnectedEventArgs)">
            <summary>What to do when the transport disconnects.</summary>
        </member>
        <member name="M:Riptide.Client.OnConnected">
            <summary>Invokes the <see cref="E:Riptide.Client.Connected"/> event.</summary>
        </member>
        <member name="M:Riptide.Client.OnConnectionFailed(Riptide.RejectReason,Riptide.Message)">
            <summary>Invokes the <see cref="E:Riptide.Client.ConnectionFailed"/> event.</summary>
            <param name="reason">The reason for the connection failure.</param>
            <param name="message">Additional data related to the failed connection attempt.</param>
        </member>
        <member name="M:Riptide.Client.OnMessageReceived(Riptide.Message)">
            <summary>Invokes the <see cref="E:Riptide.Client.MessageReceived"/> event and initiates handling of the received message.</summary>
            <param name="message">The received message.</param>
        </member>
        <member name="M:Riptide.Client.OnDisconnected(Riptide.DisconnectReason,Riptide.Message)">
            <summary>Invokes the <see cref="E:Riptide.Client.Disconnected"/> event.</summary>
            <param name="reason">The reason for the disconnection.</param>
            <param name="message">Additional data related to the disconnection.</param>
        </member>
        <member name="M:Riptide.Client.OnClientConnected(System.UInt16)">
            <summary>Invokes the <see cref="E:Riptide.Client.ClientConnected"/> event.</summary>
            <param name="clientId">The numeric ID of the client that connected.</param>
        </member>
        <member name="M:Riptide.Client.OnClientDisconnected(System.UInt16)">
            <summary>Invokes the <see cref="E:Riptide.Client.ClientDisconnected"/> event.</summary>
            <param name="clientId">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="T:Riptide.ConnectionState">
            <summary>The state of a connection.</summary>
        </member>
        <member name="F:Riptide.ConnectionState.NotConnected">
            <summary>Not connected. No connection has been established or the connection has been closed.</summary>
        </member>
        <member name="F:Riptide.ConnectionState.Connecting">
            <summary>Connecting. Still trying to establish a connection.</summary>
        </member>
        <member name="F:Riptide.ConnectionState.Pending">
            <summary>Connection is pending. The server is still determining whether or not the connection should be allowed.</summary>
        </member>
        <member name="F:Riptide.ConnectionState.Connected">
            <summary>Connected. A connection has been established successfully.</summary>
        </member>
        <member name="T:Riptide.Connection">
            <summary>Represents a connection to a <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/>.</summary>
        </member>
        <member name="F:Riptide.Connection.NotifyDelivered">
            <summary>Invoked when the notify message with the given sequence ID is successfully delivered.</summary>
        </member>
        <member name="F:Riptide.Connection.NotifyLost">
            <summary>Invoked when the notify message with the given sequence ID is lost.</summary>
        </member>
        <member name="F:Riptide.Connection.NotifyReceived">
            <summary>Invoked when a notify message is received.</summary>
        </member>
        <member name="F:Riptide.Connection.ReliableDelivered">
            <summary>Invoked when the reliable message with the given sequence ID is successfully delivered.</summary>
        </member>
        <member name="P:Riptide.Connection.Id">
            <summary>The connection's numeric ID.</summary>
        </member>
        <member name="P:Riptide.Connection.IsNotConnected">
            <summary>Whether or not the connection is currently <i>not</i> trying to connect, pending, nor actively connected.</summary>
        </member>
        <member name="P:Riptide.Connection.IsConnecting">
            <summary>Whether or not the connection is currently in the process of connecting.</summary>
        </member>
        <member name="P:Riptide.Connection.IsPending">
            <summary>Whether or not the connection is currently pending (waiting to be accepted/rejected by the server).</summary>
        </member>
        <member name="P:Riptide.Connection.IsConnected">
            <summary>Whether or not the connection is currently connected.</summary>
        </member>
        <member name="P:Riptide.Connection.RTT">
            <summary>The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet.</summary>
        </member>
        <member name="P:Riptide.Connection.SmoothRTT">
            <summary>The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet.</summary>
            <remarks>This value is slower to accurately represent lasting changes in latency than <see cref="P:Riptide.Connection.RTT"/>, but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency.</remarks>
        </member>
        <member name="P:Riptide.Connection.TimeoutTime">
            <summary>The time (in milliseconds) after which to disconnect if no heartbeats are received.</summary>
        </member>
        <member name="P:Riptide.Connection.CanTimeout">
            <summary>Whether or not the connection can time out.</summary>
        </member>
        <member name="F:Riptide.Connection.CanQualityDisconnect">
            <summary>Whether or not the connection can disconnect due to poor connection quality.</summary>
            <remarks>When this is set to <see langword="false"/>, <see cref="F:Riptide.Connection.MaxAvgSendAttempts"/>, <see cref="F:Riptide.Connection.MaxSendAttempts"/>,
            and <see cref="F:Riptide.Connection.MaxNotifyLoss"/> are ignored and exceeding their values will not trigger a disconnection.</remarks>
        </member>
        <member name="F:Riptide.Connection.Metrics">
            <summary>The connection's metrics.</summary>
        </member>
        <member name="F:Riptide.Connection.MaxAvgSendAttempts">
            <summary>The maximum acceptable average number of send attempts it takes to deliver a reliable message. The connection
            will be closed if this is exceeded more than <see cref="F:Riptide.Connection.AvgSendAttemptsResilience"/> times in a row.</summary>
        </member>
        <member name="F:Riptide.Connection.AvgSendAttemptsResilience">
            <summary>How many consecutive times <see cref="F:Riptide.Connection.MaxAvgSendAttempts"/> can be exceeded before triggering a disconnect.</summary>
        </member>
        <member name="F:Riptide.Connection.MaxSendAttempts">
            <summary>The absolute maximum number of times a reliable message may be sent. A single message reaching this threshold will cause a disconnection.</summary>
        </member>
        <member name="F:Riptide.Connection.MaxNotifyLoss">
            <summary>The maximum acceptable loss rate of notify messages. The connection will be closed if this is exceeded more than <see cref="F:Riptide.Connection.NotifyLossResilience"/> times in a row.</summary>
        </member>
        <member name="F:Riptide.Connection.NotifyLossResilience">
            <summary>How many consecutive times <see cref="F:Riptide.Connection.MaxNotifyLoss"/> can be exceeded before triggering a disconnect.</summary>
        </member>
        <member name="P:Riptide.Connection.Peer">
            <summary>The local peer this connection is associated with.</summary>
        </member>
        <member name="P:Riptide.Connection.HasTimedOut">
            <summary>Whether or not the connection has timed out.</summary>
        </member>
        <member name="P:Riptide.Connection.HasConnectAttemptTimedOut">
            <summary>Whether or not the connection attempt has timed out.</summary>
        </member>
        <member name="F:Riptide.Connection.notify">
            <summary>The sequencer for notify messages.</summary>
        </member>
        <member name="F:Riptide.Connection.reliable">
            <summary>The sequencer for reliable messages.</summary>
        </member>
        <member name="F:Riptide.Connection.pendingMessages">
            <summary>The currently pending reliably sent messages whose delivery has not been acknowledged yet. Stored by sequence ID.</summary>
        </member>
        <member name="F:Riptide.Connection.state">
            <summary>The connection's current state.</summary>
        </member>
        <member name="F:Riptide.Connection.sendAttemptsViolations">
            <summary>The number of consecutive times that the <see cref="F:Riptide.Connection.MaxAvgSendAttempts"/> threshold was exceeded.</summary>
        </member>
        <member name="F:Riptide.Connection.lossRateViolations">
            <summary>The number of consecutive times that the <see cref="F:Riptide.Connection.MaxNotifyLoss"/> threshold was exceeded.</summary>
        </member>
        <member name="F:Riptide.Connection.lastHeartbeat">
            <summary>The time at which the last heartbeat was received from the other end.</summary>
        </member>
        <member name="F:Riptide.Connection.lastPingId">
            <summary>The ID of the last ping that was sent.</summary>
        </member>
        <member name="F:Riptide.Connection.pendingPingId">
            <summary>The ID of the currently pending ping.</summary>
        </member>
        <member name="F:Riptide.Connection.pendingPingSendTime">
            <summary>The time at which the currently pending ping was sent.</summary>
        </member>
        <member name="M:Riptide.Connection.#ctor">
            <summary>Initializes the connection.</summary>
        </member>
        <member name="M:Riptide.Connection.Initialize(Riptide.Peer,System.Int32)">
            <summary>Initializes connection data.</summary>
            <param name="peer">The <see cref="T:Riptide.Peer"/> which this connection belongs to.</param>
            <param name="timeoutTime">The timeout time.</param>
        </member>
        <member name="M:Riptide.Connection.ResetTimeout">
            <summary>Resets the connection's timeout time.</summary>
        </member>
        <member name="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)">
            <summary>Sends a message.</summary>
            <param name="message">The message to send.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <returns>For reliable and notify messages, the sequence ID that the message was sent with. 0 for unreliable messages.</returns>
            <remarks>
              If you intend to continue using the message instance after calling this method, you <i>must</i> set <paramref name="shouldRelease"/>
              to <see langword="false"/>. <see cref="M:Riptide.Message.Release"/> can be used to manually return the message to the pool at a later time.
            </remarks>
        </member>
        <member name="M:Riptide.Connection.Send(System.Byte[],System.Int32)">
            <summary>Sends data.</summary>
            <param name="dataBuffer">The array containing the data.</param>
            <param name="amount">The number of bytes in the array which should be sent.</param>
        </member>
        <member name="M:Riptide.Connection.ProcessNotify(System.Byte[],System.Int32,Riptide.Message)">
            <summary>Processes a notify message.</summary>
            <param name="dataBuffer">The received data.</param>
            <param name="amount">The number of bytes that were received.</param>
            <param name="message">The message instance to use.</param>
        </member>
        <member name="M:Riptide.Connection.ShouldHandle(System.UInt16)">
            <summary>Determines if the message with the given sequence ID should be handled.</summary>
            <param name="sequenceId">The message's sequence ID.</param>
            <returns>Whether or not the message should be handled.</returns>
        </member>
        <member name="M:Riptide.Connection.LocalDisconnect">
            <summary>Cleans up the local side of the connection.</summary>
        </member>
        <member name="M:Riptide.Connection.ResendMessage(System.UInt16)">
            <summary>Resends the <see cref="T:Riptide.PendingMessage"/> with the given sequence ID.</summary>
            <param name="sequenceId">The sequence ID of the message to resend.</param>
        </member>
        <member name="M:Riptide.Connection.ClearMessage(System.UInt16)">
            <summary>Clears the <see cref="T:Riptide.PendingMessage"/> with the given sequence ID.</summary>
            <param name="sequenceId">The sequence ID that was acknowledged.</param>
        </member>
        <member name="M:Riptide.Connection.SetPending">
            <summary>Puts the connection in the pending state.</summary>
        </member>
        <member name="M:Riptide.Connection.UpdateSendAttemptsViolations">
            <summary>Checks the average send attempts (of reliable messages) and updates <see cref="F:Riptide.Connection.sendAttemptsViolations"/> accordingly.</summary>
        </member>
        <member name="M:Riptide.Connection.UpdateLossViolations">
            <summary>Checks the loss rate (of notify messages) and updates <see cref="F:Riptide.Connection.lossRateViolations"/> accordingly.</summary>
        </member>
        <member name="M:Riptide.Connection.SendAck(System.UInt16,System.UInt16,Riptide.Utils.Bitfield)">
            <summary>Sends an ack message for the given sequence ID.</summary>
            <param name="forSeqId">The sequence ID to acknowledge.</param>
            <param name="lastReceivedSeqId">The sequence ID of the latest message we've received.</param>
            <param name="receivedSeqIds">Sequence IDs of previous messages that we have (or have not received).</param>
        </member>
        <member name="M:Riptide.Connection.HandleAck(Riptide.Message)">
            <summary>Handles an ack message.</summary>
            <param name="message">The ack message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.SendWelcome">
            <summary>Sends a welcome message.</summary>
        </member>
        <member name="M:Riptide.Connection.HandleWelcomeResponse(Riptide.Message)">
            <summary>Handles a welcome message on the server.</summary>
            <param name="message">The welcome message to handle.</param>
            <returns>Whether or not the connection is now connected.</returns>
        </member>
        <member name="M:Riptide.Connection.HandleHeartbeat(Riptide.Message)">
            <summary>Handles a heartbeat message.</summary>
            <param name="message">The heartbeat message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.RespondHeartbeat(System.Byte)">
            <summary>Sends a heartbeat message.</summary>
        </member>
        <member name="M:Riptide.Connection.HandleWelcome(Riptide.Message)">
            <summary>Handles a welcome message on the client.</summary>
            <param name="message">The welcome message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.RespondWelcome">
            <summary>Sends a welcome response message.</summary>
        </member>
        <member name="M:Riptide.Connection.SendHeartbeat">
            <summary>Sends a heartbeat message.</summary>
        </member>
        <member name="M:Riptide.Connection.HandleHeartbeatResponse(Riptide.Message)">
            <summary>Handles a heartbeat message.</summary>
            <param name="message">The heartbeat message to handle.</param>
        </member>
        <member name="M:Riptide.Connection.OnNotifyDelivered(System.UInt16)">
            <summary>Invokes the <see cref="F:Riptide.Connection.NotifyDelivered"/> event.</summary>
            <param name="sequenceId">The sequence ID of the delivered message.</param>
        </member>
        <member name="M:Riptide.Connection.OnNotifyLost(System.UInt16)">
            <summary>Invokes the <see cref="F:Riptide.Connection.NotifyLost"/> event.</summary>
            <param name="sequenceId">The sequence ID of the lost message.</param>
        </member>
        <member name="T:Riptide.Connection.Sequencer">
            <summary>Provides functionality for filtering out duplicate messages and determining delivery/loss status.</summary>
        </member>
        <member name="P:Riptide.Connection.Sequencer.NextSequenceId">
            <summary>The next sequence ID to use.</summary>
        </member>
        <member name="F:Riptide.Connection.Sequencer.connection">
            <summary>The connection this sequencer belongs to.</summary>
        </member>
        <member name="F:Riptide.Connection.Sequencer.lastReceivedSeqId">
            <summary>The sequence ID of the latest message that we want to acknowledge.</summary>
        </member>
        <member name="F:Riptide.Connection.Sequencer.receivedSeqIds">
            <summary>Sequence IDs of messages which we have (or have not) received and want to acknowledge.</summary>
        </member>
        <member name="F:Riptide.Connection.Sequencer.lastAckedSeqId">
            <summary>The sequence ID of the latest message that we've received an ack for.</summary>
        </member>
        <member name="F:Riptide.Connection.Sequencer.ackedSeqIds">
            <summary>Sequence IDs of messages we sent and which we have (or have not) received acks for.</summary>
        </member>
        <member name="M:Riptide.Connection.Sequencer.#ctor(Riptide.Connection)">
            <summary>Initializes the sequencer.</summary>
            <param name="connection">The connection this sequencer belongs to.</param>
        </member>
        <member name="M:Riptide.Connection.Sequencer.ShouldHandle(System.UInt16)">
            <summary>Determines whether or not to handle a message with the given sequence ID.</summary>
            <param name="sequenceId">The sequence ID in question.</param>
            <returns>Whether or not to handle the message.</returns>
        </member>
        <member name="M:Riptide.Connection.Sequencer.UpdateReceivedAcks(System.UInt16,System.UInt16)">
            <summary>Updates which messages we've received acks for.</summary>
            <param name="remoteLastReceivedSeqId">The latest sequence ID that the other end has received.</param>
            <param name="remoteReceivedSeqIds">Sequence IDs which the other end has (or has not) received.</param>
        </member>
        <member name="T:Riptide.Connection.NotifySequencer">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Connection.NotifySequencer.#ctor(Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Connection.NotifySequencer.InsertHeader(Riptide.Message)">
            <summary>Inserts the notify header into the given message.</summary>
            <param name="message">The message to insert the header into.</param>
            <returns>The sequence ID of the message.</returns>
        </member>
        <member name="M:Riptide.Connection.NotifySequencer.ShouldHandle(System.UInt16)">
            <inheritdoc/>
            <remarks>Duplicate and out of order messages are filtered out and not handled.</remarks>
        </member>
        <member name="M:Riptide.Connection.NotifySequencer.UpdateReceivedAcks(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Connection.ReliableSequencer">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Connection.ReliableSequencer.#ctor(Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Connection.ReliableSequencer.ShouldHandle(System.UInt16)">
            <inheritdoc/>
            <remarks>Duplicate messages are filtered out while out of order messages are handled.</remarks>
        </member>
        <member name="M:Riptide.Connection.ReliableSequencer.UpdateReceivedAcks(System.UInt16,System.UInt16)">
            <summary>Updates which messages we've received acks for.</summary>
            <param name="remoteLastReceivedSeqId">The latest sequence ID that the other end has received.</param>
            <param name="remoteReceivedSeqIds">Sequence IDs which the other end has (or has not) received.</param>
        </member>
        <member name="T:Riptide.ServerConnectedEventArgs">
            <summary>Contains event data for when a client connects to the server.</summary>
        </member>
        <member name="F:Riptide.ServerConnectedEventArgs.Client">
            <summary>The newly connected client.</summary>
        </member>
        <member name="M:Riptide.ServerConnectedEventArgs.#ctor(Riptide.Connection)">
            <summary>Initializes event data.</summary>
            <param name="client">The newly connected client.</param>
        </member>
        <member name="T:Riptide.ServerConnectionFailedEventArgs">
            <summary>Contains event data for when a connection fails to be fully established.</summary>
        </member>
        <member name="F:Riptide.ServerConnectionFailedEventArgs.Client">
            <summary>The connection that failed to be established.</summary>
        </member>
        <member name="M:Riptide.ServerConnectionFailedEventArgs.#ctor(Riptide.Connection)">
            <summary>Initializes event data.</summary>
            <param name="client">The connection that failed to be established.</param>
        </member>
        <member name="T:Riptide.ServerDisconnectedEventArgs">
            <summary>Contains event data for when a client disconnects from the server.</summary>
        </member>
        <member name="F:Riptide.ServerDisconnectedEventArgs.Client">
            <summary>The client that disconnected.</summary>
        </member>
        <member name="F:Riptide.ServerDisconnectedEventArgs.Reason">
            <summary>The reason for the disconnection.</summary>
        </member>
        <member name="M:Riptide.ServerDisconnectedEventArgs.#ctor(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Initializes event data.</summary>
            <param name="client">The client that disconnected.</param>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="T:Riptide.MessageReceivedEventArgs">
            <summary>Contains event data for when a message is received.</summary>
        </member>
        <member name="F:Riptide.MessageReceivedEventArgs.FromConnection">
            <summary>The connection from which the message was received.</summary>
        </member>
        <member name="F:Riptide.MessageReceivedEventArgs.MessageId">
            <summary>The ID of the message.</summary>
        </member>
        <member name="F:Riptide.MessageReceivedEventArgs.Message">
            <summary>The received message.</summary>
        </member>
        <member name="M:Riptide.MessageReceivedEventArgs.#ctor(Riptide.Connection,System.UInt16,Riptide.Message)">
            <summary>Initializes event data.</summary>
            <param name="fromConnection">The connection from which the message was received.</param>
            <param name="messageId">The ID of the message.</param>
            <param name="message">The received message.</param>
        </member>
        <member name="T:Riptide.ConnectionFailedEventArgs">
            <summary>Contains event data for when a connection attempt to a server fails.</summary>
        </member>
        <member name="F:Riptide.ConnectionFailedEventArgs.Reason">
            <summary>The reason for the connection failure.</summary>
        </member>
        <member name="F:Riptide.ConnectionFailedEventArgs.Message">
            <summary>Additional data related to the failed connection attempt (if any).</summary>
        </member>
        <member name="M:Riptide.ConnectionFailedEventArgs.#ctor(Riptide.RejectReason,Riptide.Message)">
            <summary>Initializes event data.</summary>
            <param name="reason">The reason for the connection failure.</param>
            <param name="message">Additional data related to the failed connection attempt (if any).</param>
        </member>
        <member name="T:Riptide.DisconnectedEventArgs">
            <summary>Contains event data for when the client disconnects from a server.</summary>
        </member>
        <member name="F:Riptide.DisconnectedEventArgs.Reason">
            <summary>The reason for the disconnection.</summary>
        </member>
        <member name="F:Riptide.DisconnectedEventArgs.Message">
            <summary>Additional data related to the disconnection (if any).</summary>
        </member>
        <member name="M:Riptide.DisconnectedEventArgs.#ctor(Riptide.DisconnectReason,Riptide.Message)">
            <summary>Initializes event data.</summary>
            <param name="reason">The reason for the disconnection.</param>
            <param name="message">Additional data related to the disconnection (if any).</param>
        </member>
        <member name="T:Riptide.ClientConnectedEventArgs">
            <summary>Contains event data for when a non-local client connects to the server.</summary>
        </member>
        <member name="F:Riptide.ClientConnectedEventArgs.Id">
            <summary>The numeric ID of the client that connected.</summary>
        </member>
        <member name="M:Riptide.ClientConnectedEventArgs.#ctor(System.UInt16)">
            <summary>Initializes event data.</summary>
            <param name="id">The numeric ID of the client that connected.</param>
        </member>
        <member name="T:Riptide.ClientDisconnectedEventArgs">
            <summary>Contains event data for when a non-local client disconnects from the server.</summary>
        </member>
        <member name="F:Riptide.ClientDisconnectedEventArgs.Id">
            <summary>The numeric ID of the client that disconnected.</summary>
        </member>
        <member name="M:Riptide.ClientDisconnectedEventArgs.#ctor(System.UInt16)">
            <summary>Initializes event data.</summary>
            <param name="id">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="T:Riptide.InsufficientCapacityException">
            <summary>The exception that is thrown when a <see cref="T:Riptide.Message"/> does not contain enough unwritten bits to perform an operation.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.RiptideMessage">
            <summary>The message with insufficient remaining capacity.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.TypeName">
            <summary>The name of the type which could not be added to the message.</summary>
        </member>
        <member name="F:Riptide.InsufficientCapacityException.RequiredBits">
            <summary>The number of available bits the type requires in order to be added successfully.</summary>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance.</summary>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(Riptide.Message,System.Int32)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance and constructs an error message from the given information.</summary>
            <param name="message">The message with insufficient remaining capacity.</param>
            <param name="reserveBits">The number of bits which were attempted to be reserved.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(Riptide.Message,System.String,System.Int32)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance and constructs an error message from the given information.</summary>
            <param name="message">The message with insufficient remaining capacity.</param>
            <param name="typeName">The name of the type which could not be added to the message.</param>
            <param name="requiredBits">The number of available bits required for the type to be added successfully.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.#ctor(Riptide.Message,System.Int32,System.String,System.Int32)">
            <summary>Initializes a new <see cref="T:Riptide.InsufficientCapacityException"/> instance and constructs an error message from the given information.</summary>
            <param name="message">The message with insufficient remaining capacity.</param>
            <param name="arrayLength">The length of the array which could not be added to the message.</param>
            <param name="typeName">The name of the array's type.</param>
            <param name="requiredBits">The number of available bits required for a single element of the array to be added successfully.</param>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.GetErrorMessage(Riptide.Message,System.Int32)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.GetErrorMessage(Riptide.Message,System.String,System.Int32)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.InsufficientCapacityException.GetErrorMessage(Riptide.Message,System.Int32,System.String,System.Int32)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.NonStaticHandlerException">
            <summary>The exception that is thrown when a method with a <see cref="T:Riptide.MessageHandlerAttribute"/> is not marked as <see langword="static"/>.</summary>
        </member>
        <member name="F:Riptide.NonStaticHandlerException.DeclaringType">
            <summary>The type containing the handler method.</summary>
        </member>
        <member name="F:Riptide.NonStaticHandlerException.HandlerMethodName">
            <summary>The name of the handler method.</summary>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance.</summary>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.#ctor(System.Type,System.String)">
            <summary>Initializes a new <see cref="T:Riptide.NonStaticHandlerException"/> instance and constructs an error message from the given information.</summary>
            <param name="declaringType">The type containing the handler method.</param>
            <param name="handlerMethodName">The name of the handler method.</param>
        </member>
        <member name="M:Riptide.NonStaticHandlerException.GetErrorMessage(System.Type,System.String)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.InvalidHandlerSignatureException">
            <summary>The exception that is thrown when a method with a <see cref="T:Riptide.MessageHandlerAttribute"/> does not have an acceptable message handler method signature (either <see cref="T:Riptide.Server.MessageHandler"/> or <see cref="T:Riptide.Client.MessageHandler"/>).</summary>
        </member>
        <member name="F:Riptide.InvalidHandlerSignatureException.DeclaringType">
            <summary>The type containing the handler method.</summary>
        </member>
        <member name="F:Riptide.InvalidHandlerSignatureException.HandlerMethodName">
            <summary>The name of the handler method.</summary>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance.</summary>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.#ctor(System.Type,System.String)">
            <summary>Initializes a new <see cref="T:Riptide.InvalidHandlerSignatureException"/> instance and constructs an error message from the given information.</summary>
            <param name="declaringType">The type containing the handler method.</param>
            <param name="handlerMethodName">The name of the handler method.</param>
        </member>
        <member name="M:Riptide.InvalidHandlerSignatureException.GetErrorMessage(System.Type,System.String)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.DuplicateHandlerException">
            <summary>The exception that is thrown when multiple methods with <see cref="T:Riptide.MessageHandlerAttribute"/>s are set to handle messages with the same ID <i>and</i> have the same method signature.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.Id">
            <summary>The message ID with multiple handler methods.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.DeclaringType1">
            <summary>The type containing the first handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.HandlerMethodName1">
            <summary>The name of the first handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.DeclaringType2">
            <summary>The type containing the second handler method.</summary>
        </member>
        <member name="F:Riptide.DuplicateHandlerException.HandlerMethodName2">
            <summary>The name of the second handler method.</summary>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message.</summary>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner"/> is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.#ctor(System.UInt16,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>Initializes a new <see cref="T:Riptide.DuplicateHandlerException"/> instance and constructs an error message from the given information.</summary>
            <param name="id">The message ID with multiple handler methods.</param>
            <param name="method1">The first handler method's info.</param>
            <param name="method2">The second handler method's info.</param>
        </member>
        <member name="M:Riptide.DuplicateHandlerException.GetErrorMessage(System.UInt16,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>Constructs the error message from the given information.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.IMessageSerializable">
            <summary>Represents a type that can be added to and retrieved from messages using the <see cref="M:Riptide.Message.AddSerializable``1(``0)"/> and <see cref="M:Riptide.Message.GetSerializable``1"/> methods.</summary>
        </member>
        <member name="M:Riptide.IMessageSerializable.Serialize(Riptide.Message)">
            <summary>Adds the type to the message.</summary>
            <param name="message">The message to add the type to.</param>
        </member>
        <member name="M:Riptide.IMessageSerializable.Deserialize(Riptide.Message)">
            <summary>Retrieves the type from the message.</summary>
            <param name="message">The message to retrieve the type from.</param>
        </member>
        <member name="T:Riptide.MessageSendMode">
            <summary>The send mode of a <see cref="T:Riptide.Message"/>.</summary>
        </member>
        <member name="F:Riptide.MessageSendMode.Notify">
            <summary>Guarantees order but not delivery. Notifies the sender of what happened via the <see cref="F:Riptide.Connection.NotifyDelivered"/> and <see cref="F:Riptide.Connection.NotifyLost"/>
            events. The receiver must handle notify messages via the <see cref="F:Riptide.Connection.NotifyReceived"/> event, <i>which is different from the other two send modes</i>.</summary>
        </member>
        <member name="F:Riptide.MessageSendMode.Unreliable">
            <summary>Guarantees neither delivery nor order.</summary>
        </member>
        <member name="F:Riptide.MessageSendMode.Reliable">
            <summary>Guarantees delivery but not order.</summary>
        </member>
        <member name="T:Riptide.Message">
            <summary>Provides functionality for converting data to bytes and vice versa.</summary>
        </member>
        <member name="F:Riptide.Message.MaxHeaderSize">
            <summary>The maximum number of bits required for a message's header.</summary>
        </member>
        <member name="F:Riptide.Message.HeaderBits">
            <summary>The number of bits used by the <see cref="T:Riptide.Transports.MessageHeader"/>.</summary>
        </member>
        <member name="F:Riptide.Message.HeaderBitmask">
            <summary>A bitmask that, when applied, only keeps the bits corresponding to the <see cref="T:Riptide.Transports.MessageHeader"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.UnreliableHeaderBits">
            <summary>The header size for unreliable messages. Does not count the 2 bytes used for the message ID.</summary>
            <remarks>4 bits - header.</remarks>
        </member>
        <member name="F:Riptide.Message.ReliableHeaderBits">
            <summary>The header size for reliable messages. Does not count the 2 bytes used for the message ID.</summary>
            <remarks>4 bits - header, 16 bits - sequence ID.</remarks>
        </member>
        <member name="F:Riptide.Message.NotifyHeaderBits">
            <summary>The header size for notify messages.</summary>
            <remarks>4 bits - header, 24 bits - ack, 16 bits - sequence ID.</remarks>
        </member>
        <member name="F:Riptide.Message.MinUnreliableBytes">
            <summary>The minimum number of bytes contained in an unreliable message.</summary>
        </member>
        <member name="F:Riptide.Message.MinReliableBytes">
            <summary>The minimum number of bytes contained in a reliable message.</summary>
        </member>
        <member name="F:Riptide.Message.MinNotifyBytes">
            <summary>The minimum number of bytes contained in a notify message.</summary>
        </member>
        <member name="F:Riptide.Message.BitsPerByte">
            <summary>The number of bits in a byte.</summary>
        </member>
        <member name="F:Riptide.Message.BitsPerSegment">
            <summary>The number of bits in each data segment.</summary>
        </member>
        <member name="P:Riptide.Message.MaxSize">
            <summary>The maximum number of bytes that a message can contain, including the <see cref="F:Riptide.Message.MaxHeaderSize"/>.</summary>
        </member>
        <member name="P:Riptide.Message.MaxPayloadSize">
            <summary>The maximum number of bytes of payload data that a message can contain. This value represents how many bytes can be added to a message <i>on top of</i> the <see cref="F:Riptide.Message.MaxHeaderSize"/>.</summary>
        </member>
        <member name="F:Riptide.Message.ByteBuffer">
            <summary>An intermediary buffer to help convert <see cref="F:Riptide.Message.data"/> to a byte array when sending.</summary>
        </member>
        <member name="F:Riptide.Message.maxBitCount">
            <summary>The maximum number of bits a message can contain.</summary>
        </member>
        <member name="F:Riptide.Message.maxArraySize">
            <summary>The maximum size of the <see cref="F:Riptide.Message.data"/> array.</summary>
        </member>
        <member name="P:Riptide.Message.InstancesPerPeer">
            <summary>How many messages to add to the pool for each <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> instance that is started.</summary>
            <remarks>Changes will not affect <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/> instances which are already running until they are restarted.</remarks>
        </member>
        <member name="F:Riptide.Message.pool">
            <summary>A pool of reusable message instances.</summary>
        </member>
        <member name="P:Riptide.Message.SendMode">
            <summary>The message's send mode.</summary>
        </member>
        <member name="P:Riptide.Message.ReadBits">
            <summary>How many bits have been retrieved from the message.</summary>
        </member>
        <member name="P:Riptide.Message.UnreadBits">
            <summary>How many unretrieved bits remain in the message.</summary>
        </member>
        <member name="P:Riptide.Message.WrittenBits">
            <summary>How many bits have been added to the message.</summary>
        </member>
        <member name="P:Riptide.Message.UnwrittenBits">
            <summary>How many more bits can be added to the message.</summary>
        </member>
        <member name="P:Riptide.Message.BytesInUse">
            <summary>How many of this message's bytes are in use. Rounds up to the next byte because only whole bytes can be sent.</summary>
        </member>
        <member name="P:Riptide.Message.ReadLength">
            <summary>How many bytes have been retrieved from the message.</summary>
        </member>
        <member name="P:Riptide.Message.UnreadLength">
            <summary>How many more bytes can be retrieved from the message.</summary>
        </member>
        <member name="P:Riptide.Message.WrittenLength">
            <summary>How many bytes have been added to the message.</summary>
        </member>
        <member name="P:Riptide.Message.Data">
            <inheritdoc cref="F:Riptide.Message.data"/>
        </member>
        <member name="F:Riptide.Message.data">
            <summary>The message's data.</summary>
        </member>
        <member name="F:Riptide.Message.readBit">
            <summary>The next bit to be read.</summary>
        </member>
        <member name="F:Riptide.Message.writeBit">
            <summary>The next bit to be written.</summary>
        </member>
        <member name="M:Riptide.Message.#ctor">
            <summary>Initializes a reusable <see cref="T:Riptide.Message"/> instance.</summary>
        </member>
        <member name="M:Riptide.Message.Create">
            <summary>Gets a completely empty message instance with no header.</summary>
            <returns>An empty message instance.</returns>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.MessageSendMode)">
            <summary>Gets a message instance that can be used for sending.</summary>
            <param name="sendMode">The mode in which the message should be sent.</param>
            <returns>A message instance ready to be sent.</returns>
            <remarks>This method is primarily intended for use with <see cref="F:Riptide.MessageSendMode.Notify"/> as notify messages don't have a built-in message ID, and unlike
            <see cref="M:Riptide.Message.Create(Riptide.MessageSendMode,System.UInt16)"/> and <see cref="M:Riptide.Message.Create(Riptide.MessageSendMode,System.Enum)"/>, this overload does not add a message ID to the message.</remarks>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.MessageSendMode,System.UInt16)">
            <summary>Gets a message instance that can be used for sending.</summary>
            <param name="sendMode">The mode in which the message should be sent.</param>
            <param name="id">The message ID.</param>
            <returns>A message instance ready to be sent.</returns>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.MessageSendMode,System.Enum)">
            <inheritdoc cref="M:Riptide.Message.Create(Riptide.MessageSendMode,System.UInt16)"/>
            <remarks>NOTE: <paramref name="id"/> will be cast to a <see cref="T:System.UInt16"/>. You should ensure that its value never exceeds that of <see cref="F:System.UInt16.MaxValue"/>, otherwise you'll encounter unexpected behaviour when handling messages.</remarks>
        </member>
        <member name="M:Riptide.Message.Create(Riptide.Transports.MessageHeader)">
            <summary>Gets a message instance that can be used for sending.</summary>
            <param name="header">The message's header type.</param>
            <returns>A message instance ready to be sent.</returns>
        </member>
        <member name="M:Riptide.Message.TrimPool">
            <summary>Trims the message pool to a more appropriate size for how many <see cref="T:Riptide.Server"/> and/or <see cref="T:Riptide.Client"/> instances are currently running.</summary>
        </member>
        <member name="M:Riptide.Message.RetrieveFromPool">
            <summary>Retrieves a message instance from the pool. If none is available, a new instance is created.</summary>
            <returns>A message instance ready to be used for sending or handling.</returns>
        </member>
        <member name="M:Riptide.Message.Release">
            <summary>Returns the message instance to the internal pool so it can be reused.</summary>
        </member>
        <member name="M:Riptide.Message.Init(Riptide.Transports.MessageHeader)">
            <summary>Initializes the message so that it can be used for sending.</summary>
            <param name="header">The message's header type.</param>
            <returns>The message, ready to be used for sending.</returns>
        </member>
        <member name="M:Riptide.Message.Init(System.Byte,System.Int32,Riptide.Transports.MessageHeader@)">
            <summary>Initializes the message so that it can be used for receiving/handling.</summary>
            <param name="firstByte">The first byte of the received data.</param>
            <param name="header">The message's header type.</param>
            <param name="contentLength">The number of bytes which this message will contain.</param>
            <returns>The message, ready to be used for handling.</returns>
        </member>
        <member name="M:Riptide.Message.SetHeader(Riptide.Transports.MessageHeader)">
            <summary>Sets the message's header bits to the given <paramref name="header"/> and determines the appropriate <see cref="T:Riptide.MessageSendMode"/> and read/write positions.</summary>
            <param name="header">The header to use for this message.</param>
        </member>
        <member name="M:Riptide.Message.AddMessage(Riptide.Message)">
            <summary>Adds <paramref name="message"/>'s unread bits to the message.</summary>
            <param name="message">The message whose unread bits to add.</param>
            <returns>The message that the bits were added to.</returns>
            <remarks>This method does not move <paramref name="message"/>'s internal read position!</remarks>
        </member>
        <member name="M:Riptide.Message.AddMessage(Riptide.Message,System.Int32,System.Int32)">
            <summary>Adds a range of bits from <paramref name="message"/> to the message.</summary>
            <param name="message">The message whose bits to add.</param>
            <param name="amount">The number of bits to add.</param>
            <param name="startBit">The position in <paramref name="message"/> from which to add the bits.</param>
            <returns>The message that the bits were added to.</returns>
            <remarks>This method does not move <paramref name="message"/>'s internal read position!</remarks>
        </member>
        <member name="M:Riptide.Message.ReserveBits(System.Int32)">
            <summary>Moves the message's internal write position by the given <paramref name="amount"/> of bits, reserving them so they can be set at a later time.</summary>
            <param name="amount">The number of bits to reserve.</param>
            <returns>The message instance.</returns>
        </member>
        <member name="M:Riptide.Message.SkipBits(System.Int32)">
            <summary>Moves the message's internal read position by the given <paramref name="amount"/> of bits, skipping over them.</summary>
            <param name="amount">The number of bits to skip.</param>
            <returns>The message instance.</returns>
        </member>
        <member name="M:Riptide.Message.SetBits(System.UInt64,System.Int32,System.Int32)">
            <summary>Sets up to 64 bits at the specified position in the message.</summary>
            <param name="bitfield">The bits to write into the message.</param>
            <param name="amount">The number of bits to set.</param>
            <param name="startBit">The bit position in the message at which to start writing.</param>
            <returns>The message instance.</returns>
            <remarks>This method can be used to directly set a range of bits anywhere in the message without moving its internal write position. Data which was previously added to
            the message and which falls within the range of bits being set will be <i>overwritten</i>, meaning that improper use of this method will likely corrupt the message!</remarks>
        </member>
        <member name="M:Riptide.Message.PeekBits(System.Int32,System.Int32,System.Byte@)">
            <summary>Retrieves up to 8 bits from the specified position in the message.</summary>
            <param name="amount">The number of bits to peek.</param>
            <param name="startBit">The bit position in the message at which to start peeking.</param>
            <param name="bitfield">The bits that were retrieved.</param>
            <returns>The message instance.</returns>
            <remarks>This method can be used to retrieve a range of bits from anywhere in the message without moving its internal read position.</remarks>
        </member>
        <member name="M:Riptide.Message.PeekBits(System.Int32,System.Int32,System.UInt16@)">
            <summary>Retrieves up to 16 bits from the specified position in the message.</summary>
            <inheritdoc cref="M:Riptide.Message.PeekBits(System.Int32,System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Message.PeekBits(System.Int32,System.Int32,System.UInt32@)">
            <summary>Retrieves up to 32 bits from the specified position in the message.</summary>
            <inheritdoc cref="M:Riptide.Message.PeekBits(System.Int32,System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Message.PeekBits(System.Int32,System.Int32,System.UInt64@)">
            <summary>Retrieves up to 64 bits from the specified position in the message.</summary>
            <inheritdoc cref="M:Riptide.Message.PeekBits(System.Int32,System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Message.AddBits(System.Byte,System.Int32)">
            <summary>Adds up to 8 of the given bits to the message.</summary>
            <param name="bitfield">The bits to add.</param>
            <param name="amount">The number of bits to add.</param>
            <returns>The message that the bits were added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddBits(System.UInt16,System.Int32)">
            <summary>Adds up to 16 of the given bits to the message.</summary>
            <inheritdoc cref="M:Riptide.Message.AddBits(System.Byte,System.Int32)"/>
        </member>
        <member name="M:Riptide.Message.AddBits(System.UInt32,System.Int32)">
            <summary>Adds up to 32 of the given bits to the message.</summary>
            <inheritdoc cref="M:Riptide.Message.AddBits(System.Byte,System.Int32)"/>
        </member>
        <member name="M:Riptide.Message.AddBits(System.UInt64,System.Int32)">
            <summary>Adds up to 64 of the given bits to the message.</summary>
            <inheritdoc cref="M:Riptide.Message.AddBits(System.Byte,System.Int32)"/>
        </member>
        <member name="M:Riptide.Message.GetBits(System.Int32,System.Byte@)">
            <summary>Retrieves the next <paramref name="amount"/> bits (up to 8) from the message.</summary>
            <param name="amount">The number of bits to retrieve.</param>
            <param name="bitfield">The bits that were retrieved.</param>
            <returns>The messages that the bits were retrieved from.</returns>
        </member>
        <member name="M:Riptide.Message.GetBits(System.Int32,System.UInt16@)">
            <summary>Retrieves the next <paramref name="amount"/> bits (up to 16) from the message.</summary>
            <inheritdoc cref="M:Riptide.Message.GetBits(System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Message.GetBits(System.Int32,System.UInt32@)">
            <summary>Retrieves the next <paramref name="amount"/> bits (up to 32) from the message.</summary>
            <inheritdoc cref="M:Riptide.Message.GetBits(System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Message.GetBits(System.Int32,System.UInt64@)">
            <summary>Retrieves the next <paramref name="amount"/> bits (up to 64) from the message.</summary>
            <inheritdoc cref="M:Riptide.Message.GetBits(System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Message.AddVarLong(System.Int64)">
            <summary>Adds a positive or negative number to the message, using fewer bits for smaller values.</summary>
            <inheritdoc cref="M:Riptide.Message.AddVarULong(System.UInt64)"/>
        </member>
        <member name="M:Riptide.Message.AddVarULong(System.UInt64)">
            <summary>Adds a positive number to the message, using fewer bits for smaller values.</summary>
            <param name="value">The value to add.</param>
            <returns>The message that the value was added to.</returns>
            <remarks>The value is added in segments of 8 bits, 1 of which is used to indicate whether or not another segment follows. As a result, small values are
            added to the message using fewer bits, while large values will require a few more bits than they would if they were added via <see cref="M:Riptide.Message.AddByte(System.Byte)"/>,
            <see cref="M:Riptide.Message.AddUShort(System.UInt16)"/>, <see cref="M:Riptide.Message.AddUInt(System.UInt32)"/>, or <see cref="M:Riptide.Message.AddULong(System.UInt64)"/> (or their signed counterparts).</remarks>
        </member>
        <member name="M:Riptide.Message.GetVarLong">
            <summary>Retrieves a positive or negative number from the message, using fewer bits for smaller values.</summary>
            <inheritdoc cref="M:Riptide.Message.GetVarULong"/>
        </member>
        <member name="M:Riptide.Message.GetVarULong">
            <summary>Retrieves a positive number from the message, using fewer bits for smaller values.</summary>
            <returns>The value that was retrieved.</returns>
            <remarks>The value is retrieved in segments of 8 bits, 1 of which is used to indicate whether or not another segment follows. As a result, small values are
            retrieved from the message using fewer bits, while large values will require a few more bits than they would if they were retrieved via <see cref="M:Riptide.Message.GetByte"/>,
            <see cref="M:Riptide.Message.GetUShort"/>, <see cref="M:Riptide.Message.GetUInt"/>, or <see cref="M:Riptide.Message.GetULong"/> (or their signed counterparts).</remarks>
        </member>
        <member name="M:Riptide.Message.AddByte(System.Byte)">
            <summary>Adds a <see cref="T:System.Byte"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Byte"/> to add.</param>
            <returns>The message that the <see cref="T:System.Byte"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddSByte(System.SByte)">
            <summary>Adds an <see cref="T:System.SByte"/> to the message.</summary>
            <param name="value">The <see cref="T:System.SByte"/> to add.</param>
            <returns>The message that the <see cref="T:System.SByte"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetByte">
            <summary>Retrieves a <see cref="T:System.Byte"/> from the message.</summary>
            <returns>The <see cref="T:System.Byte"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSByte">
            <summary>Retrieves an <see cref="T:System.SByte"/> from the message.</summary>
            <returns>The <see cref="T:System.SByte"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Byte"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)">
            <summary>Adds an <see cref="T:System.SByte"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes">
            <summary>Retrieves a <see cref="T:System.Byte"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Byte"/> array from the message.</summary>
            <param name="amount">The amount of bytes to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>Populates a <see cref="T:System.Byte"/> array with bytes retrieved from the message.</summary>
            <param name="amount">The amount of bytes to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetSBytes">
            <summary>Retrieves an <see cref="T:System.SByte"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSBytes(System.Int32)">
            <summary>Retrieves an <see cref="T:System.SByte"/> array from the message.</summary>
            <param name="amount">The amount of sbytes to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSBytes(System.Int32,System.SByte[],System.Int32)">
            <summary>Populates a <see cref="T:System.SByte"/> array with bytes retrieved from the message.</summary>
            <param name="amount">The amount of sbytes to retrieve.</param>
            <param name="intArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating <paramref name="intArray"/>.</param>
        </member>
        <member name="M:Riptide.Message.ReadBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>Reads a number of bytes from the message and writes them into the given array.</summary>
            <param name="amount">The amount of bytes to read.</param>
            <param name="intoArray">The array to write the bytes into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadSBytes(System.Int32,System.SByte[],System.Int32)">
            <summary>Reads a number of sbytes from the message and writes them into the given array.</summary>
            <param name="amount">The amount of sbytes to read.</param>
            <param name="intoArray">The array to write the sbytes into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddBool(System.Boolean)">
            <summary>Adds a <see cref="T:System.Boolean"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Boolean"/> to add.</param>
            <returns>The message that the <see cref="T:System.Boolean"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBool">
            <summary>Retrieves a <see cref="T:System.Boolean"/> from the message.</summary>
            <returns>The <see cref="T:System.Boolean"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Boolean"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools">
            <summary>Retrieves a <see cref="T:System.Boolean"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Boolean"/> array from the message.</summary>
            <param name="amount">The amount of bools to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetBools(System.Int32,System.Boolean[],System.Int32)">
            <summary>Populates a <see cref="T:System.Boolean"/> array with bools retrieved from the message.</summary>
            <param name="amount">The amount of bools to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadBools(System.Int32,System.Boolean[],System.Int32)">
            <summary>Reads a number of bools from the message and writes them into the given array.</summary>
            <param name="amount">The amount of bools to read.</param>
            <param name="intoArray">The array to write the bools into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddShort(System.Int16)">
            <summary>Adds a <see cref="T:System.Int16"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int16"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int16"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUShort(System.UInt16)">
            <summary>Adds a <see cref="T:System.UInt16"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt16"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt16"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetShort">
            <summary>Retrieves a <see cref="T:System.Int16"/> from the message.</summary>
            <returns>The <see cref="T:System.Int16"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShort">
            <summary>Retrieves a <see cref="T:System.UInt16"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt16"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Int16"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt16"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts">
            <summary>Retrieves a <see cref="T:System.Int16"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Int16"/> array from the message.</summary>
            <param name="amount">The amount of shorts to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetShorts(System.Int32,System.Int16[],System.Int32)">
            <summary>Populates a <see cref="T:System.Int16"/> array with shorts retrieved from the message.</summary>
            <param name="amount">The amount of shorts to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetUShorts">
            <summary>Retrieves a <see cref="T:System.UInt16"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShorts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt16"/> array from the message.</summary>
            <param name="amount">The amount of ushorts to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUShorts(System.Int32,System.UInt16[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt16"/> array with ushorts retrieved from the message.</summary>
            <param name="amount">The amount of ushorts to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadShorts(System.Int32,System.Int16[],System.Int32)">
            <summary>Reads a number of shorts from the message and writes them into the given array.</summary>
            <param name="amount">The amount of shorts to read.</param>
            <param name="intoArray">The array to write the shorts into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadUShorts(System.Int32,System.UInt16[],System.Int32)">
            <summary>Reads a number of ushorts from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ushorts to read.</param>
            <param name="intoArray">The array to write the ushorts into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddInt(System.Int32)">
            <summary>Adds an <see cref="T:System.Int32"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int32"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int32"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUInt(System.UInt32)">
            <summary>Adds a <see cref="T:System.UInt32"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt32"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt32"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetInt">
            <summary>Retrieves an <see cref="T:System.Int32"/> from the message.</summary>
            <returns>The <see cref="T:System.Int32"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInt">
            <summary>Retrieves a <see cref="T:System.UInt32"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt32"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)">
            <summary>Adds an <see cref="T:System.Int32"/> array message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt32"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts">
            <summary>Retrieves an <see cref="T:System.Int32"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts(System.Int32)">
            <summary>Retrieves an <see cref="T:System.Int32"/> array from the message.</summary>
            <param name="amount">The amount of ints to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetInts(System.Int32,System.Int32[],System.Int32)">
            <summary>Populates an <see cref="T:System.Int32"/> array with ints retrieved from the message.</summary>
            <param name="amount">The amount of ints to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetUInts">
            <summary>Retrieves a <see cref="T:System.UInt32"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInts(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt32"/> array from the message.</summary>
            <param name="amount">The amount of uints to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetUInts(System.Int32,System.UInt32[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt32"/> array with uints retrieved from the message.</summary>
            <param name="amount">The amount of uints to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadInts(System.Int32,System.Int32[],System.Int32)">
            <summary>Reads a number of ints from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ints to read.</param>
            <param name="intoArray">The array to write the ints into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadUInts(System.Int32,System.UInt32[],System.Int32)">
            <summary>Reads a number of uints from the message and writes them into the given array.</summary>
            <param name="amount">The amount of uints to read.</param>
            <param name="intoArray">The array to write the uints into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddLong(System.Int64)">
            <summary>Adds a <see cref="T:System.Int64"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Int64"/> to add.</param>
            <returns>The message that the <see cref="T:System.Int64"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddULong(System.UInt64)">
            <summary>Adds a <see cref="T:System.UInt64"/> to the message.</summary>
            <param name="value">The <see cref="T:System.UInt64"/> to add.</param>
            <returns>The message that the <see cref="T:System.UInt64"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetLong">
            <summary>Retrieves a <see cref="T:System.Int64"/> from the message.</summary>
            <returns>The <see cref="T:System.Int64"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULong">
            <summary>Retrieves a <see cref="T:System.UInt64"/> from the message.</summary>
            <returns>The <see cref="T:System.UInt64"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Int64"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)">
            <summary>Adds a <see cref="T:System.UInt64"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs">
            <summary>Retrieves a <see cref="T:System.Int64"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Int64"/> array from the message.</summary>
            <param name="amount">The amount of longs to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetLongs(System.Int32,System.Int64[],System.Int32)">
            <summary>Populates a <see cref="T:System.Int64"/> array with longs retrieved from the message.</summary>
            <param name="amount">The amount of longs to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.GetULongs">
            <summary>Retrieves a <see cref="T:System.UInt64"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULongs(System.Int32)">
            <summary>Retrieves a <see cref="T:System.UInt64"/> array from the message.</summary>
            <param name="amount">The amount of ulongs to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetULongs(System.Int32,System.UInt64[],System.Int32)">
            <summary>Populates a <see cref="T:System.UInt64"/> array with ulongs retrieved from the message.</summary>
            <param name="amount">The amount of ulongs to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadLongs(System.Int32,System.Int64[],System.Int32)">
            <summary>Reads a number of longs from the message and writes them into the given array.</summary>
            <param name="amount">The amount of longs to read.</param>
            <param name="intoArray">The array to write the longs into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadULongs(System.Int32,System.UInt64[],System.Int32)">
            <summary>Reads a number of ulongs from the message and writes them into the given array.</summary>
            <param name="amount">The amount of ulongs to read.</param>
            <param name="intoArray">The array to write the ulongs into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddFloat(System.Single)">
            <summary>Adds a <see cref="T:System.Single"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Single"/> to add.</param>
            <returns>The message that the <see cref="T:System.Single"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloat">
            <summary>Retrieves a <see cref="T:System.Single"/> from the message.</summary>
            <returns>The <see cref="T:System.Single"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Single"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats">
            <summary>Retrieves a <see cref="T:System.Single"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Single"/> array from the message.</summary>
            <param name="amount">The amount of floats to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetFloats(System.Int32,System.Single[],System.Int32)">
            <summary>Populates a <see cref="T:System.Single"/> array with floats retrieved from the message.</summary>
            <param name="amount">The amount of floats to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadFloats(System.Int32,System.Single[],System.Int32)">
            <summary>Reads a number of floats from the message and writes them into the given array.</summary>
            <param name="amount">The amount of floats to read.</param>
            <param name="intoArray">The array to write the floats into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddDouble(System.Double)">
            <summary>Adds a <see cref="T:System.Double"/> to the message.</summary>
            <param name="value">The <see cref="T:System.Double"/> to add.</param>
            <returns>The message that the <see cref="T:System.Double"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetDouble">
            <summary>Retrieves a <see cref="T:System.Double"/> from the message.</summary>
            <returns>The <see cref="T:System.Double"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)">
            <summary>Adds a <see cref="T:System.Double"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles">
            <summary>Retrieves a <see cref="T:System.Double"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles(System.Int32)">
            <summary>Retrieves a <see cref="T:System.Double"/> array from the message.</summary>
            <param name="amount">The amount of doubles to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetDoubles(System.Int32,System.Double[],System.Int32)">
            <summary>Populates a <see cref="T:System.Double"/> array with doubles retrieved from the message.</summary>
            <param name="amount">The amount of doubles to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadDoubles(System.Int32,System.Double[],System.Int32)">
            <summary>Reads a number of doubles from the message and writes them into the given array.</summary>
            <param name="amount">The amount of doubles to read.</param>
            <param name="intoArray">The array to write the doubles into.</param>
            <param name="startIndex">The position at which to start writing into the array.</param>
        </member>
        <member name="M:Riptide.Message.AddString(System.String)">
            <summary>Adds a <see cref="T:System.String"/> to the message.</summary>
            <param name="value">The <see cref="T:System.String"/> to add.</param>
            <returns>The message that the <see cref="T:System.String"/> was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetString">
            <summary>Retrieves a <see cref="T:System.String"/> from the message.</summary>
            <returns>The <see cref="T:System.String"/> that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddStrings(System.String[],System.Boolean)">
            <summary>Adds a <see cref="T:System.String"/> array to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings">
            <summary>Retrieves a <see cref="T:System.String"/> array from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings(System.Int32)">
            <summary>Retrieves a <see cref="T:System.String"/> array from the message.</summary>
            <param name="amount">The amount of strings to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetStrings(System.Int32,System.String[],System.Int32)">
            <summary>Populates a <see cref="T:System.String"/> array with strings retrieved from the message.</summary>
            <param name="amount">The amount of strings to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.AddSerializable``1(``0)">
            <summary>Adds a serializable to the message.</summary>
            <param name="value">The serializable to add.</param>
            <returns>The message that the serializable was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializable``1">
            <summary>Retrieves a serializable from the message.</summary>
            <returns>The serializable that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)">
            <summary>Adds an array of serializables to the message.</summary>
            <param name="array">The array to add.</param>
            <param name="includeLength">Whether or not to include the length of the array in the message.</param>
            <returns>The message that the array was added to.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1">
            <summary>Retrieves an array of serializables from the message.</summary>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1(System.Int32)">
            <summary>Retrieves an array of serializables from the message.</summary>
            <param name="amount">The amount of serializables to retrieve.</param>
            <returns>The array that was retrieved.</returns>
        </member>
        <member name="M:Riptide.Message.GetSerializables``1(System.Int32,``0[],System.Int32)">
            <summary>Populates an array of serializables retrieved from the message.</summary>
            <param name="amount">The amount of serializables to retrieve.</param>
            <param name="intoArray">The array to populate.</param>
            <param name="startIndex">The position at which to start populating the array.</param>
        </member>
        <member name="M:Riptide.Message.ReadSerializables``1(System.Int32,``0[],System.Int32)">
            <summary>Reads a number of serializables from the message and writes them into the given array.</summary>
            <param name="amount">The amount of serializables to read.</param>
            <param name="intArray">The array to write the serializables into.</param>
            <param name="startIndex">The position at which to start writing into <paramref name="intArray"/>.</param>
        </member>
        <member name="M:Riptide.Message.Add(System.Byte)">
            <inheritdoc cref="M:Riptide.Message.AddByte(System.Byte)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddByte(System.Byte)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.SByte)">
            <inheritdoc cref="M:Riptide.Message.AddSByte(System.SByte)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSByte(System.SByte)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBool(System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBool(System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int16)">
            <inheritdoc cref="M:Riptide.Message.AddShort(System.Int16)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddShort(System.Int16)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt16)">
            <inheritdoc cref="M:Riptide.Message.AddUShort(System.UInt16)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUShort(System.UInt16)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int32)">
            <inheritdoc cref="M:Riptide.Message.AddInt(System.Int32)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddInt(System.Int32)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt32)">
            <inheritdoc cref="M:Riptide.Message.AddUInt(System.UInt32)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUInt(System.UInt32)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int64)">
            <inheritdoc cref="M:Riptide.Message.AddLong(System.Int64)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddLong(System.Int64)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt64)">
            <inheritdoc cref="M:Riptide.Message.AddULong(System.UInt64)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddULong(System.UInt64)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Single)">
            <inheritdoc cref="M:Riptide.Message.AddFloat(System.Single)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddFloat(System.Single)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Double)">
            <inheritdoc cref="M:Riptide.Message.AddDouble(System.Double)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddDouble(System.Double)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.String)">
            <inheritdoc cref="M:Riptide.Message.AddString(System.String)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddString(System.String)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add``1(``0)">
            <inheritdoc cref="M:Riptide.Message.AddSerializable``1(``0)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSerializable``1(``0)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Byte[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBytes(System.Byte[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.SByte[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSBytes(System.SByte[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Boolean[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddBools(System.Boolean[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int16[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddShorts(System.Int16[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt16[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUShorts(System.UInt16[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int32[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddInts(System.Int32[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt32[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddUInts(System.UInt32[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Int64[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddLongs(System.Int64[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.UInt64[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddULongs(System.UInt64[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Single[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddFloats(System.Single[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.Double[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddDoubles(System.Double[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add(System.String[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddStrings(System.String[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddStrings(System.String[],System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Riptide.Message.Add``1(``0[],System.Boolean)">
            <inheritdoc cref="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)"/>
            <remarks>This method is simply an alternative way of calling <see cref="M:Riptide.Message.AddSerializables``1(``0[],System.Boolean)"/>.</remarks>
        </member>
        <member name="F:Riptide.Message.ByteName">
            <summary>The name of a <see cref="T:System.Byte"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.SByteName">
            <summary>The name of a <see cref="T:System.SByte"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.BoolName">
            <summary>The name of a <see cref="T:System.Boolean"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ShortName">
            <summary>The name of a <see cref="T:System.Int16"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.UShortName">
            <summary>The name of a <see cref="T:System.UInt16"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.IntName">
            <summary>The name of an <see cref="T:System.Int32"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.UIntName">
            <summary>The name of a <see cref="T:System.UInt32"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.LongName">
            <summary>The name of a <see cref="T:System.Int64"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ULongName">
            <summary>The name of a <see cref="T:System.UInt64"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.FloatName">
            <summary>The name of a <see cref="T:System.Single"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.DoubleName">
            <summary>The name of a <see cref="T:System.Double"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.StringName">
            <summary>The name of a <see cref="T:System.String"/> value.</summary>
        </member>
        <member name="F:Riptide.Message.ArrayLengthName">
            <summary>The name of an array length value.</summary>
        </member>
        <member name="M:Riptide.Message.NotEnoughBitsError(System.String,System.String)">
            <summary>Constructs an error message for when a message contains insufficient unread bits to retrieve a certain value.</summary>
            <param name="valueName">The name of the value type for which the retrieval attempt failed.</param>
            <param name="defaultReturn">Text describing the value which will be returned.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.Message.NotEnoughBitsError(System.Int32,System.String)">
            <summary>Constructs an error message for when a message contains insufficient unread bits to retrieve an array of values.</summary>
            <param name="arrayLength">The expected length of the array.</param>
            <param name="valueName">The name of the value type for which the retrieval attempt failed.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Riptide.Message.ArrayNotLongEnoughError(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>Constructs an error message for when a number of retrieved values do not fit inside the bounds of the provided array.</summary>
            <param name="amount">The number of values being retrieved.</param>
            <param name="arrayLength">The length of the provided array.</param>
            <param name="startIndex">The position in the array at which to begin writing values.</param>
            <param name="valueName">The name of the value type which is being retrieved.</param>
            <param name="pluralValueName">The name of the value type in plural form. If left empty, this will be set to <paramref name="valueName"/> with an <c>s</c> appended to it.</param>
            <returns>The error message.</returns>
        </member>
        <member name="T:Riptide.MessageHandlerAttribute">
            <summary>Specifies a method as the message handler for messages with the given ID.</summary>
            <remarks>
              <para>
                In order for a method to qualify as a message handler, it <i>must</i> match a valid message handler method signature. <see cref="T:Riptide.Server"/>s
                will only use methods marked with this attribute if they match the <see cref="T:Riptide.Server.MessageHandler"/> signature, and <see cref="T:Riptide.Client"/>s
                will only use methods marked with this attribute if they match the <see cref="T:Riptide.Client.MessageHandler"/> signature.
              </para>
              <para>
                Methods marked with this attribute which match neither of the valid message handler signatures will not be used by <see cref="T:Riptide.Server"/>s
                or <see cref="T:Riptide.Client"/>s and will cause warnings at runtime.
              </para>
              <para>
                If you want a <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> to only use a subset of all message handler methods, you can do so by setting up
                custom message handler groups. Simply set the group ID in the <see cref="M:Riptide.MessageHandlerAttribute.#ctor(System.UInt16,System.Byte)"/> constructor and pass the
                same value to the <see cref="M:Riptide.Server.Start(System.UInt16,System.UInt16,System.Byte,System.Boolean)"/> or <see cref="M:Riptide.Client.Connect(System.String,System.Int32,System.Byte,Riptide.Message,System.Boolean)"/> method. This
                will make that <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> only use message handlers which have the same group ID.
              </para>
            </remarks>
        </member>
        <member name="F:Riptide.MessageHandlerAttribute.MessageId">
            <summary>The ID of the message type which this method is meant to handle.</summary>
        </member>
        <member name="F:Riptide.MessageHandlerAttribute.GroupId">
            <summary>The ID of the group of message handlers which this method belongs to.</summary>
        </member>
        <member name="M:Riptide.MessageHandlerAttribute.#ctor(System.UInt16,System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:Riptide.MessageHandlerAttribute"/> class with the <paramref name="messageId"/> and <paramref name="groupId"/> values.</summary>
            <param name="messageId">The ID of the message type which this method is meant to handle.</param>
            <param name="groupId">The ID of the group of message handlers which this method belongs to.</param>
            <remarks>
              <see cref="T:Riptide.Server"/>s will only use this method if its signature matches the <see cref="T:Riptide.Server.MessageHandler"/> signature.
              <see cref="T:Riptide.Client"/>s will only use this method if its signature matches the <see cref="T:Riptide.Client.MessageHandler"/> signature.
              This method will be ignored if its signature matches neither of the valid message handler signatures.
            </remarks>
        </member>
        <member name="T:Riptide.MessageRelayFilter">
            <summary>Provides functionality for enabling/disabling automatic message relaying by message type.</summary>
        </member>
        <member name="F:Riptide.MessageRelayFilter.BitsPerInt">
            <summary>The number of bits an int consists of.</summary>
        </member>
        <member name="F:Riptide.MessageRelayFilter.filter">
            <summary>An array storing all the bits which represent whether messages of a given ID should be relayed or not.</summary>
        </member>
        <member name="M:Riptide.MessageRelayFilter.#ctor(System.Int32)">
            <summary>Creates a filter of a given size.</summary>
            <param name="size">How big to make the filter.</param>
            <remarks>
                <paramref name="size"/> should be set to the value of the largest message ID, plus 1. For example, if a server will
                handle messages with IDs 1, 2, 3, 7, and 8, <paramref name="size"/> should be set to 9 (8 is the largest possible value,
                and 8 + 1 = 9) despite the fact that there are only 5 unique message IDs the server will ever handle.
            </remarks>
        </member>
        <member name="M:Riptide.MessageRelayFilter.#ctor(System.Type)">
            <summary>Creates a filter based on an enum of message IDs.</summary>
            <param name="idEnum">The enum type.</param>
        </member>
        <member name="M:Riptide.MessageRelayFilter.#ctor(System.Int32,System.UInt16[])">
            <summary>Creates a filter of a given size and enables relaying for the given message IDs.</summary>
            <param name="size">How big to make the filter.</param>
            <param name="idsToEnable">Message IDs to enable auto relaying for.</param>
            <remarks>
                <paramref name="size"/> should be set to the value of the largest message ID, plus 1. For example, if a server will
                handle messages with IDs 1, 2, 3, 7, and 8, <paramref name="size"/> should be set to 9 (8 is the largest possible value,
                and 8 + 1 = 9) despite the fact that there are only 5 unique message IDs the server will ever handle.
            </remarks>
        </member>
        <member name="M:Riptide.MessageRelayFilter.#ctor(System.Type,System.Enum[])">
            <summary>Creates a filter based on an enum of message IDs and enables relaying for the given message IDs.</summary>
            <param name="idEnum">The enum type.</param>
            <param name="idsToEnable">Message IDs to enable relaying for.</param>
        </member>
        <member name="M:Riptide.MessageRelayFilter.EnableIds(System.UInt16[])">
            <summary>Enables auto relaying for the given message IDs.</summary>
            <param name="idsToEnable">Message IDs to enable relaying for.</param>
        </member>
        <member name="M:Riptide.MessageRelayFilter.GetSizeFromEnum(System.Type)">
            <summary>Calculate the filter size necessary to manage all message IDs in the given enum.</summary>
            <param name="idEnum">The enum type.</param>
            <returns>The appropriate filter size.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="idEnum"/> is not an <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:Riptide.MessageRelayFilter.Set(System.Int32)">
            <summary>Sets the filter size.</summary>
            <param name="size">How big to make the filter.</param>
        </member>
        <member name="M:Riptide.MessageRelayFilter.EnableRelay(System.UInt16)">
            <summary>Enables auto relaying for the given message ID.</summary>
            <param name="forMessageId">The message ID to enable relaying for.</param>
        </member>
        <member name="M:Riptide.MessageRelayFilter.EnableRelay(System.Enum)">
            <inheritdoc cref="M:Riptide.MessageRelayFilter.EnableRelay(System.UInt16)"/>
        </member>
        <member name="M:Riptide.MessageRelayFilter.DisableRelay(System.UInt16)">
            <summary>Disables auto relaying for the given message ID.</summary>
            <param name="forMessageId">The message ID to enable relaying for.</param>
        </member>
        <member name="M:Riptide.MessageRelayFilter.DisableRelay(System.Enum)">
            <inheritdoc cref="M:Riptide.MessageRelayFilter.DisableRelay(System.UInt16)"/>
        </member>
        <member name="M:Riptide.MessageRelayFilter.ShouldRelay(System.UInt16)">
            <summary>Checks whether or not messages with the given ID should be relayed.</summary>
            <param name="forMessageId">The message ID to check.</param>
            <returns>Whether or not messages with the given ID should be relayed.</returns>
        </member>
        <member name="T:Riptide.RejectReason">
            <summary>The reason the connection attempt was rejected.</summary>
        </member>
        <member name="F:Riptide.RejectReason.NoConnection">
            <summary>No response was received from the server (because the client has no internet connection, the server is offline, no server is listening on the target endpoint, etc.).</summary>
        </member>
        <member name="F:Riptide.RejectReason.AlreadyConnected">
            <summary>The client is already connected.</summary>
        </member>
        <member name="F:Riptide.RejectReason.ServerFull">
            <summary>The server is full.</summary>
        </member>
        <member name="F:Riptide.RejectReason.Rejected">
            <summary>The connection attempt was rejected.</summary>
        </member>
        <member name="F:Riptide.RejectReason.Custom">
            <summary>The connection attempt was rejected and custom data may have been included with the rejection message.</summary>
        </member>
        <member name="T:Riptide.DisconnectReason">
            <summary>The reason for a disconnection.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.NeverConnected">
            <summary>No connection was ever established.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.ConnectionRejected">
            <summary>The connection attempt was rejected by the server.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.TransportError">
            <summary>The active transport detected a problem with the connection.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.TimedOut">
            <summary>The connection timed out.</summary>
            <remarks>
              This also acts as the fallback reason—if a client disconnects and the message containing the <i>real</i> reason is lost
              in transmission, it can't be resent as the connection will have already been closed. As a result, the other end will time
              out the connection after a short period of time and this will be used as the reason.
            </remarks>
        </member>
        <member name="F:Riptide.DisconnectReason.Kicked">
            <summary>The client was forcibly disconnected by the server.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.ServerStopped">
            <summary>The server shut down.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.Disconnected">
            <summary>The disconnection was initiated by the client.</summary>
        </member>
        <member name="F:Riptide.DisconnectReason.PoorConnection">
            <summary>The connection's loss and/or resend rates exceeded the maximum acceptable thresholds, or a reliably sent message could not be delivered.</summary>
        </member>
        <member name="T:Riptide.Peer">
            <summary>Provides base functionality for <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/>.</summary>
        </member>
        <member name="F:Riptide.Peer.LogName">
            <summary>The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</summary>
        </member>
        <member name="P:Riptide.Peer.TimeoutTime">
            <summary>Sets the relevant connections' <see cref="P:Riptide.Connection.TimeoutTime"/>s.</summary>
        </member>
        <member name="P:Riptide.Peer.HeartbeatInterval">
            <summary>The interval (in milliseconds) at which to send and expect heartbeats to be received.</summary>
            <remarks>Changes to this value will only take effect after the next heartbeat is executed.</remarks>
        </member>
        <member name="P:Riptide.Peer.ActiveCount">
            <summary>The number of currently active <see cref="T:Riptide.Server"/> and <see cref="T:Riptide.Client"/> instances.</summary>
        </member>
        <member name="P:Riptide.Peer.ConnectTimeoutTime">
            <summary>The time (in milliseconds) for which to wait before giving up on a connection attempt.</summary>
        </member>
        <member name="P:Riptide.Peer.CurrentTime">
            <summary>The current time.</summary>
        </member>
        <member name="F:Riptide.Peer.useMessageHandlers">
            <summary>Whether or not the peer should use the built-in message handler system.</summary>
        </member>
        <member name="F:Riptide.Peer.defaultTimeout">
            <summary>The default time (in milliseconds) after which to disconnect if no heartbeats are received.</summary>
        </member>
        <member name="F:Riptide.Peer.time">
            <summary>A stopwatch used to track how much time has passed.</summary>
        </member>
        <member name="F:Riptide.Peer.messagesToHandle">
            <summary>Received messages which need to be handled.</summary>
        </member>
        <member name="F:Riptide.Peer.eventQueue">
            <summary>A queue of events to execute, ordered by how soon they need to be executed.</summary>
        </member>
        <member name="M:Riptide.Peer.#ctor(System.String)">
            <summary>Initializes the peer.</summary>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Peer.FindMessageHandlers">
            <summary>Retrieves methods marked with <see cref="T:Riptide.MessageHandlerAttribute"/>.</summary>
            <returns>An array containing message handler methods.</returns>
        </member>
        <member name="M:Riptide.Peer.CreateMessageHandlersDictionary(System.Byte)">
            <summary>Builds a dictionary of message IDs and their corresponding message handler methods.</summary>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to include in the dictionary.</param>
        </member>
        <member name="M:Riptide.Peer.StartTime">
            <summary>Starts tracking how much time has passed.</summary>
        </member>
        <member name="M:Riptide.Peer.StopTime">
            <summary>Stops tracking how much time has passed.</summary>
        </member>
        <member name="M:Riptide.Peer.Heartbeat">
            <summary>Beats the heart.</summary>
        </member>
        <member name="M:Riptide.Peer.Update">
            <summary>Handles any received messages and invokes any delayed events which need to be invoked.</summary>
        </member>
        <member name="M:Riptide.Peer.ExecuteLater(System.Int64,Riptide.Utils.DelayedEvent)">
            <summary>Sets up a delayed event to be executed after the given time has passed.</summary>
            <param name="inMS">How long from now to execute the delayed event, in milliseconds.</param>
            <param name="delayedEvent">The delayed event to execute later.</param>
        </member>
        <member name="M:Riptide.Peer.HandleMessages">
            <summary>Handles all queued messages.</summary>
        </member>
        <member name="M:Riptide.Peer.HandleData(System.Object,Riptide.Transports.DataReceivedEventArgs)">
            <summary>Handles data received by the transport.</summary>
        </member>
        <member name="M:Riptide.Peer.Handle(Riptide.Message,Riptide.Transports.MessageHeader,Riptide.Connection)">
            <summary>Handles a message.</summary>
            <param name="message">The message to handle.</param>
            <param name="header">The message's header type.</param>
            <param name="connection">The connection which the message was received on.</param>
        </member>
        <member name="M:Riptide.Peer.Disconnect(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Disconnects the connection in question. Necessary for connections to be able to initiate disconnections (like in the case of poor connection quality).</summary>
            <param name="connection">The connection to disconnect.</param>
            <param name="reason">The reason why the connection is being disconnected.</param>
        </member>
        <member name="M:Riptide.Peer.IncreaseActiveCount">
            <summary>Increases <see cref="P:Riptide.Peer.ActiveCount"/>. For use when a new <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> is started.</summary>
        </member>
        <member name="M:Riptide.Peer.DecreaseActiveCount">
            <summary>Decreases <see cref="P:Riptide.Peer.ActiveCount"/>. For use when a <see cref="T:Riptide.Server"/> or <see cref="T:Riptide.Client"/> is stopped.</summary>
        </member>
        <member name="T:Riptide.MessageToHandle">
            <summary>Stores information about a message that needs to be handled.</summary>
        </member>
        <member name="F:Riptide.MessageToHandle.Message">
            <summary>The message that needs to be handled.</summary>
        </member>
        <member name="F:Riptide.MessageToHandle.Header">
            <summary>The message's header type.</summary>
        </member>
        <member name="F:Riptide.MessageToHandle.FromConnection">
            <summary>The connection on which the message was received.</summary>
        </member>
        <member name="M:Riptide.MessageToHandle.#ctor(Riptide.Message,Riptide.Transports.MessageHeader,Riptide.Connection)">
            <summary>Handles initialization.</summary>
            <param name="message">The message that needs to be handled.</param>
            <param name="header">The message's header type.</param>
            <param name="fromConnection">The connection on which the message was received.</param>
        </member>
        <member name="T:Riptide.PendingMessage">
            <summary>Represents a currently pending reliably sent message whose delivery has not been acknowledged yet.</summary>
        </member>
        <member name="P:Riptide.PendingMessage.LastSendTime">
            <summary>The time of the latest send attempt.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.RetryTimeMultiplier">
            <summary>The multiplier used to determine how long to wait before resending a pending message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.pool">
            <summary>A pool of reusable <see cref="T:Riptide.PendingMessage"/> instances.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.connection">
            <summary>The <see cref="T:Riptide.Connection"/> to use to send (and resend) the pending message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.data">
            <summary>The contents of the message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.size">
            <summary>The length in bytes of the message.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.sendAttempts">
            <summary>How many send attempts have been made so far.</summary>
        </member>
        <member name="F:Riptide.PendingMessage.wasCleared">
            <summary>Whether the pending message has been cleared or not.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.#ctor">
            <summary>Handles initial setup.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.Create(System.UInt16,Riptide.Message,Riptide.Connection)">
            <summary>Retrieves a <see cref="T:Riptide.PendingMessage"/> instance and initializes it.</summary>
            <param name="sequenceId">The sequence ID of the message.</param>
            <param name="message">The message that is being sent reliably.</param>
            <param name="connection">The <see cref="T:Riptide.Connection"/> to use to send (and resend) the pending message.</param>
            <returns>An intialized <see cref="T:Riptide.PendingMessage"/> instance.</returns>
        </member>
        <member name="M:Riptide.PendingMessage.RetrieveFromPool">
            <summary>Retrieves a <see cref="T:Riptide.PendingMessage"/> instance from the pool. If none is available, a new instance is created.</summary>
            <returns>A <see cref="T:Riptide.PendingMessage"/> instance.</returns>
        </member>
        <member name="M:Riptide.PendingMessage.ClearPool">
            <summary>Empties the pool. Does not affect <see cref="T:Riptide.PendingMessage"/> instances which are actively pending and therefore not in the pool.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.Release">
            <summary>Returns the <see cref="T:Riptide.PendingMessage"/> instance to the pool so it can be reused.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.RetrySend">
            <summary>Resends the message.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.TrySend">
            <summary>Attempts to send the message.</summary>
        </member>
        <member name="M:Riptide.PendingMessage.Clear">
            <summary>Clears the message.</summary>
        </member>
        <member name="T:Riptide.Server">
            <summary>A server that can accept connections from <see cref="T:Riptide.Client"/>s.</summary>
        </member>
        <member name="E:Riptide.Server.ClientConnected">
            <summary>Invoked when a client connects.</summary>
        </member>
        <member name="E:Riptide.Server.ConnectionFailed">
            <summary>Invoked when a connection fails to be fully established.</summary>
        </member>
        <member name="E:Riptide.Server.MessageReceived">
            <summary>Invoked when a message is received.</summary>
        </member>
        <member name="E:Riptide.Server.ClientDisconnected">
            <summary>Invoked when a client disconnects.</summary>
        </member>
        <member name="P:Riptide.Server.IsRunning">
            <summary>Whether or not the server is currently running.</summary>
        </member>
        <member name="P:Riptide.Server.Port">
            <summary>The local port that the server is running on.</summary>
        </member>
        <member name="P:Riptide.Server.TimeoutTime">
            <summary>Sets the default timeout time for future connections and updates the <see cref="P:Riptide.Connection.TimeoutTime"/> of all connected clients.</summary>
        </member>
        <member name="P:Riptide.Server.MaxClientCount">
            <summary>The maximum number of concurrent connections.</summary>
        </member>
        <member name="P:Riptide.Server.ClientCount">
            <summary>The number of currently connected clients.</summary>
        </member>
        <member name="P:Riptide.Server.Clients">
            <summary>An array of all the currently connected clients.</summary>
            <remarks>The position of each <see cref="T:Riptide.Connection"/> instance in the array does <i>not</i> correspond to that client's numeric ID (except by coincidence).</remarks>
        </member>
        <member name="T:Riptide.Server.MessageHandler">
            <summary>Encapsulates a method that handles a message from a client.</summary>
            <param name="fromClientId">The numeric ID of the client from whom the message was received.</param>
            <param name="message">The message that was received.</param>
        </member>
        <member name="T:Riptide.Server.ConnectionAttemptHandler">
            <summary>Encapsulates a method that determines whether or not to accept a client's connection attempt.</summary>
        </member>
        <member name="F:Riptide.Server.HandleConnection">
            <summary>An optional method which determines whether or not to accept a client's connection attempt.</summary>
            <remarks>The <see cref="T:Riptide.Connection"/> parameter is the pending connection and the <see cref="T:Riptide.Message"/> parameter is a message containing any additional data the
            client included with the connection attempt. If you choose to subscribe a method to this delegate, you should use it to call either <see cref="M:Riptide.Server.Accept(Riptide.Connection)"/>
            or <see cref="M:Riptide.Server.Reject(Riptide.Connection,Riptide.Message)"/>. Not doing so will result in the connection hanging until the client times out.</remarks>
        </member>
        <member name="F:Riptide.Server.RelayFilter">
            <summary>Stores which message IDs have auto relaying enabled. Relaying is disabled entirely when this is <see langword="null"/>.</summary>
        </member>
        <member name="F:Riptide.Server.pendingConnections">
            <summary>Currently pending connections which are waiting to be accepted or rejected.</summary>
        </member>
        <member name="F:Riptide.Server.clients">
            <summary>Currently connected clients.</summary>
        </member>
        <member name="F:Riptide.Server.timedOutClients">
            <summary>Clients that have timed out and need to be removed from <see cref="F:Riptide.Server.clients"/>.</summary>
        </member>
        <member name="F:Riptide.Server.messageHandlers">
            <summary>Methods used to handle messages, accessible by their corresponding message IDs.</summary>
        </member>
        <member name="F:Riptide.Server.transport">
            <summary>The underlying transport's server that is used for sending and receiving data.</summary>
        </member>
        <member name="F:Riptide.Server.availableClientIds">
            <summary>All currently unused client IDs.</summary>
        </member>
        <member name="M:Riptide.Server.#ctor(Riptide.Transports.IServer,System.String)">
            <summary>Handles initial setup.</summary>
            <param name="transport">The transport to use for sending and receiving data.</param>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Server.#ctor(System.String)">
            <summary>Handles initial setup using the built-in UDP transport.</summary>
            <param name="logName">The name to use when logging messages via <see cref="T:Riptide.Utils.RiptideLogger"/>.</param>
        </member>
        <member name="M:Riptide.Server.ChangeTransport(Riptide.Transports.IServer)">
            <summary>Stops the server if it's running and swaps out the transport it's using.</summary>
            <param name="newTransport">The new underlying transport server to use for sending and receiving data.</param>
            <remarks>This method does not automatically restart the server. To continue accepting connections, <see cref="M:Riptide.Server.Start(System.UInt16,System.UInt16,System.Byte,System.Boolean)"/> must be called again.</remarks>
        </member>
        <member name="M:Riptide.Server.Start(System.UInt16,System.UInt16,System.Byte,System.Boolean)">
            <summary>Starts the server.</summary>
            <param name="port">The local port on which to start the server.</param>
            <param name="maxClientCount">The maximum number of concurrent connections to allow.</param>
            <param name="messageHandlerGroupId">The ID of the group of message handler methods to use when building <see cref="F:Riptide.Server.messageHandlers"/>.</param>
            <param name="useMessageHandlers">Whether or not the server should use the built-in message handler system.</param>
            <remarks>Setting <paramref name="useMessageHandlers"/> to <see langword="false"/> will disable the automatic detection and execution of methods with the <see cref="T:Riptide.MessageHandlerAttribute"/>, which is beneficial if you prefer to handle messages via the <see cref="E:Riptide.Server.MessageReceived"/> event.</remarks>
        </member>
        <member name="M:Riptide.Server.SubToTransportEvents">
            <summary>Subscribes appropriate methods to the transport's events.</summary>
        </member>
        <member name="M:Riptide.Server.UnsubFromTransportEvents">
            <summary>Unsubscribes methods from all of the transport's events.</summary>
        </member>
        <member name="M:Riptide.Server.CreateMessageHandlersDictionary(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Server.HandleConnectionAttempt(System.Object,Riptide.Transports.ConnectedEventArgs)">
            <summary>Handles an incoming connection attempt.</summary>
        </member>
        <member name="M:Riptide.Server.HandleConnect(Riptide.Connection,Riptide.Message)">
            <summary>Handles a connect message.</summary>
            <param name="connection">The client that sent the connect message.</param>
            <param name="connectMessage">The connect message.</param>
        </member>
        <member name="M:Riptide.Server.Accept(Riptide.Connection)">
            <summary>Accepts the given pending connection.</summary>
            <param name="connection">The connection to accept.</param>
        </member>
        <member name="M:Riptide.Server.Reject(Riptide.Connection,Riptide.Message)">
            <summary>Rejects the given pending connection.</summary>
            <param name="connection">The connection to reject.</param>
            <param name="message">Data that should be sent to the client being rejected. Use <see cref="M:Riptide.Message.Create"/> to get an empty message instance.</param>
        </member>
        <member name="M:Riptide.Server.AcceptConnection(Riptide.Connection)">
            <summary>Accepts the given pending connection.</summary>
            <param name="connection">The connection to accept.</param>
        </member>
        <member name="M:Riptide.Server.Reject(Riptide.Connection,Riptide.RejectReason,Riptide.Message)">
            <summary>Rejects the given pending connection.</summary>
            <param name="connection">The connection to reject.</param>
            <param name="reason">The reason why the connection is being rejected.</param>
            <param name="rejectMessage">Data that should be sent to the client being rejected.</param>
        </member>
        <member name="M:Riptide.Server.Heartbeat">
            <summary>Checks if clients have timed out.</summary>
        </member>
        <member name="M:Riptide.Server.Update">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Server.Handle(Riptide.Message,Riptide.Transports.MessageHeader,Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Server.Send(Riptide.Message,System.UInt16,System.Boolean)">
            <summary>Sends a message to a given client.</summary>
            <param name="message">The message to send.</param>
            <param name="toClient">The numeric ID of the client to send the message to.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Server.Send(Riptide.Message,Riptide.Connection,System.Boolean)">
            <summary>Sends a message to a given client.</summary>
            <param name="message">The message to send.</param>
            <param name="toClient">The client to send the message to.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Server.SendToAll(Riptide.Message,System.Boolean)">
            <summary>Sends a message to all connected clients.</summary>
            <param name="message">The message to send.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Server.SendToAll(Riptide.Message,System.UInt16,System.Boolean)">
            <summary>Sends a message to all connected clients except the given one.</summary>
            <param name="message">The message to send.</param>
            <param name="exceptToClientId">The numeric ID of the client to <i>not</i> send the message to.</param>
            <param name="shouldRelease">Whether or not to return the message to the pool after it is sent.</param>
            <inheritdoc cref="M:Riptide.Connection.Send(Riptide.Message,System.Boolean)"/>
        </member>
        <member name="M:Riptide.Server.TryGetClient(System.UInt16,Riptide.Connection@)">
            <summary>Retrieves the client with the given ID, if a client with that ID is currently connected.</summary>
            <param name="id">The ID of the client to retrieve.</param>
            <param name="client">The retrieved client.</param>
            <returns><see langword="true"/> if a client with the given ID was connected; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Riptide.Server.DisconnectClient(System.UInt16,Riptide.Message)">
            <summary>Disconnects a specific client.</summary>
            <param name="id">The numeric ID of the client to disconnect.</param>
            <param name="message">Data that should be sent to the client being disconnected. Use <see cref="M:Riptide.Message.Create"/> to get an empty message instance.</param>
        </member>
        <member name="M:Riptide.Server.DisconnectClient(Riptide.Connection,Riptide.Message)">
            <summary>Disconnects the given client.</summary>
            <param name="client">The client to disconnect.</param>
            <param name="message">Data that should be sent to the client being disconnected. Use <see cref="M:Riptide.Message.Create"/> to get an empty message instance.</param>
        </member>
        <member name="M:Riptide.Server.Disconnect(Riptide.Connection,Riptide.DisconnectReason)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Server.LocalDisconnect(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Cleans up the local side of the given connection.</summary>
            <param name="client">The client to disconnect.</param>
            <param name="reason">The reason why the client is being disconnected.</param>
        </member>
        <member name="M:Riptide.Server.TransportDisconnected(System.Object,Riptide.Transports.DisconnectedEventArgs)">
            <summary>What to do when the transport disconnects a client.</summary>
        </member>
        <member name="M:Riptide.Server.Stop">
            <summary>Stops the server.</summary>
        </member>
        <member name="M:Riptide.Server.InitializeClientIds">
            <summary>Initializes available client IDs.</summary>
        </member>
        <member name="M:Riptide.Server.GetAvailableClientId">
            <summary>Retrieves an available client ID.</summary>
            <returns>The client ID. 0 if none were available.</returns>
        </member>
        <member name="M:Riptide.Server.SendDisconnect(Riptide.Connection,Riptide.DisconnectReason,Riptide.Message)">
            <summary>Sends a disconnect message.</summary>
            <param name="client">The client to send the disconnect message to.</param>
            <param name="reason">Why the client is being disconnected.</param>
            <param name="disconnectMessage">Optional custom data that should be sent to the client being disconnected.</param>
        </member>
        <member name="M:Riptide.Server.SendClientConnected(Riptide.Connection)">
            <summary>Sends a client connected message.</summary>
            <param name="newClient">The newly connected client.</param>
        </member>
        <member name="M:Riptide.Server.SendClientDisconnected(System.UInt16)">
            <summary>Sends a client disconnected message.</summary>
            <param name="id">The numeric ID of the client that disconnected.</param>
        </member>
        <member name="M:Riptide.Server.OnClientConnected(Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Server.ClientConnected"/> event.</summary>
            <param name="client">The newly connected client.</param>
        </member>
        <member name="M:Riptide.Server.OnConnectionFailed(Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Server.ConnectionFailed"/> event.</summary>
            <param name="connection">The connection that failed to be fully established.</param>
        </member>
        <member name="M:Riptide.Server.OnMessageReceived(Riptide.Message,Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Server.MessageReceived"/> event and initiates handling of the received message.</summary>
            <param name="message">The received message.</param>
            <param name="fromConnection">The client from which the message was received.</param>
        </member>
        <member name="M:Riptide.Server.OnClientDisconnected(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Invokes the <see cref="E:Riptide.Server.ClientDisconnected"/> event.</summary>
            <param name="connection">The client that disconnected.</param>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="T:Riptide.Transports.ConnectedEventArgs">
            <summary>Contains event data for when a server's transport successfully establishes a connection to a client.</summary>
        </member>
        <member name="F:Riptide.Transports.ConnectedEventArgs.Connection">
            <summary>The newly established connection.</summary>
        </member>
        <member name="M:Riptide.Transports.ConnectedEventArgs.#ctor(Riptide.Connection)">
            <summary>Initializes event data.</summary>
            <param name="connection">The newly established connection.</param>
        </member>
        <member name="T:Riptide.Transports.DataReceivedEventArgs">
            <summary>Contains event data for when a server's or client's transport receives data.</summary>
        </member>
        <member name="F:Riptide.Transports.DataReceivedEventArgs.DataBuffer">
            <summary>An array containing the received data.</summary>
        </member>
        <member name="F:Riptide.Transports.DataReceivedEventArgs.Amount">
            <summary>The number of bytes that were received.</summary>
        </member>
        <member name="F:Riptide.Transports.DataReceivedEventArgs.FromConnection">
            <summary>The connection which the data was received from.</summary>
        </member>
        <member name="M:Riptide.Transports.DataReceivedEventArgs.#ctor(System.Byte[],System.Int32,Riptide.Connection)">
            <summary>Initializes event data.</summary>
            <param name="dataBuffer">An array containing the received data.</param>
            <param name="amount">The number of bytes that were received.</param>
            <param name="fromConnection">The connection which the data was received from.</param>
        </member>
        <member name="T:Riptide.Transports.DisconnectedEventArgs">
            <summary>Contains event data for when a server's or client's transport initiates or detects a disconnection.</summary>
        </member>
        <member name="F:Riptide.Transports.DisconnectedEventArgs.Connection">
            <summary>The closed connection.</summary>
        </member>
        <member name="F:Riptide.Transports.DisconnectedEventArgs.Reason">
            <summary>The reason for the disconnection.</summary>
        </member>
        <member name="M:Riptide.Transports.DisconnectedEventArgs.#ctor(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Initializes event data.</summary>
            <param name="connection">The closed connection.</param>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="T:Riptide.Transports.IClient">
            <summary>Defines methods, properties, and events which every transport's client must implement.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.Connected">
            <summary>Invoked when a connection is established at the transport level.</summary>
        </member>
        <member name="E:Riptide.Transports.IClient.ConnectionFailed">
            <summary>Invoked when a connection attempt fails at the transport level.</summary>
        </member>
        <member name="M:Riptide.Transports.IClient.Connect(System.String,Riptide.Connection@,System.String@)">
            <summary>Starts the transport and attempts to connect to the given host address.</summary>
            <param name="hostAddress">The host address to connect to.</param>
            <param name="connection">The pending connection. <see langword="null"/> if an issue occurred.</param>
            <param name="connectError">The error message associated with the issue that occurred, if any.</param>
            <returns><see langword="true"/> if a connection attempt will be made. <see langword="false"/> if an issue occurred (such as <paramref name="hostAddress"/> being in an invalid format) and a connection attempt will <i>not</i> be made.</returns>
        </member>
        <member name="M:Riptide.Transports.IClient.Disconnect">
            <summary>Closes the connection to the server.</summary>
        </member>
        <member name="T:Riptide.Transports.MessageHeader">
            <summary>The header type of a <see cref="T:Riptide.Message"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Unreliable">
            <summary>An unreliable user message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Ack">
            <summary>An internal unreliable ack message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Connect">
            <summary>An internal unreliable connect message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Reject">
            <summary>An internal unreliable connection rejection message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Heartbeat">
            <summary>An internal unreliable heartbeat message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Disconnect">
            <summary>An internal unreliable disconnect message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Notify">
            <summary>A notify message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Reliable">
            <summary>A reliable user message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.Welcome">
            <summary>An internal reliable welcome message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.ClientConnected">
            <summary>An internal reliable client connected message.</summary>
        </member>
        <member name="F:Riptide.Transports.MessageHeader.ClientDisconnected">
            <summary>An internal reliable client disconnected message.</summary>
        </member>
        <member name="T:Riptide.Transports.IPeer">
            <summary>Defines methods, properties, and events which every transport's server <i>and</i> client must implement.</summary>
        </member>
        <member name="E:Riptide.Transports.IPeer.DataReceived">
            <summary>Invoked when data is received by the transport.</summary>
        </member>
        <member name="E:Riptide.Transports.IPeer.Disconnected">
            <summary>Invoked when a disconnection is initiated or detected by the transport.</summary>
        </member>
        <member name="M:Riptide.Transports.IPeer.Poll">
            <summary>Initiates handling of any received messages.</summary>
        </member>
        <member name="T:Riptide.Transports.IServer">
            <summary>Defines methods, properties, and events which every transport's server must implement.</summary>
        </member>
        <member name="E:Riptide.Transports.IServer.Connected">
            <summary>Invoked when a connection is established at the transport level.</summary>
        </member>
        <member name="P:Riptide.Transports.IServer.Port">
            <inheritdoc cref="P:Riptide.Server.Port"/>
        </member>
        <member name="M:Riptide.Transports.IServer.Start(System.UInt16)">
            <summary>Starts the transport and begins listening for incoming connections.</summary>
            <param name="port">The local port on which to listen for connections.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.Close(Riptide.Connection)">
            <summary>Closes an active connection.</summary>
            <param name="connection">The connection to close.</param>
        </member>
        <member name="M:Riptide.Transports.IServer.Shutdown">
            <summary>Closes all existing connections and stops listening for new connections.</summary>
        </member>
        <member name="T:Riptide.Transports.Tcp.TcpClient">
            <summary>A client which can connect to a <see cref="T:Riptide.Transports.Tcp.TcpServer"/>.</summary>
        </member>
        <member name="E:Riptide.Transports.Tcp.TcpClient.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Tcp.TcpClient.ConnectionFailed">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Tcp.TcpClient.DataReceived">
            <inheritdoc/>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpClient.tcpConnection">
            <summary>The connection to the server.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpClient.Connect(System.String,Riptide.Connection@,System.String@)">
            <inheritdoc/>
            <remarks>Expects the host address to consist of an IP and port, separated by a colon. For example: <c>127.0.0.1:7777</c>.</remarks>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpClient.ParseHostAddress(System.String,System.Net.IPAddress@,System.UInt16@)">
            <summary>Parses <paramref name="hostAddress"/> into <paramref name="ip"/> and <paramref name="port"/>, if possible.</summary>
            <param name="hostAddress">The host address to parse.</param>
            <param name="ip">The retrieved IP.</param>
            <param name="port">The retrieved port.</param>
            <returns>Whether or not <paramref name="hostAddress"/> was in a valid format.</returns>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpClient.Poll">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpClient.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpClient.OnConnected">
            <summary>Invokes the <see cref="E:Riptide.Transports.Tcp.TcpClient.Connected"/> event.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpClient.OnConnectionFailed">
            <summary>Invokes the <see cref="E:Riptide.Transports.Tcp.TcpClient.ConnectionFailed"/> event.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpClient.OnDataReceived(System.Int32,Riptide.Transports.Tcp.TcpConnection)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Transports.Tcp.TcpConnection">
            <summary>Represents a connection to a <see cref="T:Riptide.Transports.Tcp.TcpServer"/> or <see cref="T:Riptide.Transports.Tcp.TcpClient"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpConnection.RemoteEndPoint">
            <summary>The endpoint representing the other end of the connection.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpConnection.DidReceiveConnect">
            <summary>Whether or not the server has received a connection attempt from this connection.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpConnection.socket">
            <summary>The socket to use for sending and receiving.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpConnection.peer">
            <summary>The local peer this connection is associated with.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpConnection.sizeBytes">
            <summary>An array to receive message size values into.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpConnection.nextMessageSize">
            <summary>The size of the next message to be received.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint,Riptide.Transports.Tcp.TcpPeer)">
            <summary>Initializes the connection.</summary>
            <param name="socket">The socket to use for sending and receiving.</param>
            <param name="remoteEndPoint">The endpoint representing the other end of the connection.</param>
            <param name="peer">The local peer this connection is associated with.</param>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.Send(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.Receive">
            <summary>Polls the socket and checks if any data was received.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.TryReceiveMessage(System.Int32@)">
            <summary>Receives a message, if all of its data is ready to be received.</summary>
            <param name="receivedByteCount">How many bytes were received.</param>
            <returns>Whether or not all of the message's data was ready to be received.</returns>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.Close">
            <summary>Closes the connection.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.Equals(Riptide.Transports.Tcp.TcpConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpConnection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Transports.Tcp.TcpPeer">
            <summary>Provides base send &#38; receive functionality for <see cref="T:Riptide.Transports.Tcp.TcpServer"/> and <see cref="T:Riptide.Transports.Tcp.TcpClient"/>.</summary>
        </member>
        <member name="E:Riptide.Transports.Tcp.TcpPeer.Disconnected">
            <inheritdoc cref="E:Riptide.Transports.IPeer.Disconnected"/>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpPeer.ReceiveBuffer">
            <summary>An array that incoming data is received into.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpPeer.SendBuffer">
            <summary>An array that outgoing data is sent out of.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpPeer.DefaultSocketBufferSize">
            <summary>The default size used for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpPeer.socketBufferSize">
            <summary>The size to use for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpPeer.socket">
            <summary>The main socket, either used for listening for connections or for sending and receiving data.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpPeer.MinSocketBufferSize">
            <summary>The minimum size that may be used for the socket's send and receive buffers.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpPeer.#ctor(System.Int32)">
            <summary>Initializes the transport.</summary>
            <param name="socketBufferSize">How big the socket's send and receive buffers should be.</param>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpPeer.OnDataReceived(System.Int32,Riptide.Transports.Tcp.TcpConnection)">
            <summary>Handles received data.</summary>
            <param name="amount">The number of bytes that were received.</param>
            <param name="fromConnection">The connection from which the data was received.</param>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpPeer.OnDisconnected(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Tcp.TcpPeer.Disconnected"/> event.</summary>
            <param name="connection">The closed connection.</param>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="T:Riptide.Transports.Tcp.TcpServer">
            <summary>A server which can accept connections from <see cref="T:Riptide.Transports.Tcp.TcpClient"/>s.</summary>
        </member>
        <member name="E:Riptide.Transports.Tcp.TcpServer.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Tcp.TcpServer.DataReceived">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Tcp.TcpServer.Port">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Tcp.TcpServer.MaxPendingConnections">
            <summary>The maximum number of pending connections to allow at any given time.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpServer.isRunning">
            <summary>Whether or not the server is running.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpServer.connections">
            <summary>The currently open connections, accessible by their endpoints.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpServer.closedConnections">
            <summary>Connections that have been closed and need to be removed from <see cref="F:Riptide.Transports.Tcp.TcpServer.connections"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Tcp.TcpServer.listenAddress">
            <summary>The IP address to bind the socket to.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.#ctor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>Initializes the transport, binding the socket to a specific IP address.</summary>
            <param name="listenAddress">The IP address to bind the socket to.</param>
            <param name="socketBufferSize">How big the socket's send and receive buffers should be.</param>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.Start(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.StartListening(System.UInt16)">
            <summary>Starts listening for connections on the given port.</summary>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.Poll">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.Accept">
            <summary>Accepts any pending connections.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.StopListening">
            <summary>Stops listening for connections.</summary>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.Close(Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.OnConnected(Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Tcp.TcpServer.Connected"/> event.</summary>
            <param name="connection">The successfully established connection.</param>
        </member>
        <member name="M:Riptide.Transports.Tcp.TcpServer.OnDataReceived(System.Int32,Riptide.Transports.Tcp.TcpConnection)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Transports.Udp.UdpClient">
            <summary>A client which can connect to a <see cref="T:Riptide.Transports.Udp.UdpServer"/>.</summary>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpClient.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpClient.ConnectionFailed">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpClient.DataReceived">
            <inheritdoc/>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpClient.udpConnection">
            <summary>The connection to the server.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.#ctor(Riptide.Transports.Udp.SocketMode,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.Connect(System.String,Riptide.Connection@,System.String@)">
            <inheritdoc/>
            <remarks>Expects the host address to consist of an IP and port, separated by a colon. For example: <c>127.0.0.1:7777</c>.</remarks>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.ParseHostAddress(System.String,System.Net.IPAddress@,System.UInt16@)">
            <summary>Parses <paramref name="hostAddress"/> into <paramref name="ip"/> and <paramref name="port"/>, if possible.</summary>
            <param name="hostAddress">The host address to parse.</param>
            <param name="ip">The retrieved IP.</param>
            <param name="port">The retrieved port.</param>
            <returns>Whether or not <paramref name="hostAddress"/> was in a valid format.</returns>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.OnConnected">
            <summary>Invokes the <see cref="E:Riptide.Transports.Udp.UdpClient.Connected"/> event.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.OnConnectionFailed">
            <summary>Invokes the <see cref="E:Riptide.Transports.Udp.UdpClient.ConnectionFailed"/> event.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpClient.OnDataReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Transports.Udp.UdpConnection">
            <summary>Represents a connection to a <see cref="T:Riptide.Transports.Udp.UdpServer"/> or <see cref="T:Riptide.Transports.Udp.UdpClient"/>.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpConnection.RemoteEndPoint">
            <summary>The endpoint representing the other end of the connection.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpConnection.peer">
            <summary>The local peer this connection is associated with.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.#ctor(System.Net.IPEndPoint,Riptide.Transports.Udp.UdpPeer)">
            <summary>Initializes the connection.</summary>
            <param name="remoteEndPoint">The endpoint representing the other end of the connection.</param>
            <param name="peer">The local peer this connection is associated with.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.Send(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.Equals(Riptide.Transports.Udp.UdpConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpConnection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Transports.Udp.SocketMode">
            <summary>The kind of socket to create.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.SocketMode.Both">
            <summary>Dual-mode. Works with both IPv4 and IPv6.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.SocketMode.IPv4Only">
            <summary>IPv4 only mode.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.SocketMode.IPv6Only">
            <summary>IPv6 only mode.</summary>
        </member>
        <member name="T:Riptide.Transports.Udp.UdpPeer">
            <summary>Provides base send &#38; receive functionality for <see cref="T:Riptide.Transports.Udp.UdpServer"/> and <see cref="T:Riptide.Transports.Udp.UdpClient"/>.</summary>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpPeer.Disconnected">
            <inheritdoc cref="E:Riptide.Transports.IPeer.Disconnected"/>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.DefaultSocketBufferSize">
            <summary>The default size used for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.MinSocketBufferSize">
            <summary>The minimum size that may be used for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.ReceivePollingTime">
            <summary>How long to wait for a packet, in microseconds.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.mode">
            <summary>Whether to create an IPv4 only, IPv6 only, or dual-mode socket.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.socketBufferSize">
            <summary>The size to use for the socket's send and receive buffers.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.receivedData">
            <summary>The array that incoming data is received into.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.socket">
            <summary>The socket to use for sending and receiving.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.isRunning">
            <summary>Whether or not the transport is running.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpPeer.remoteEndPoint">
            <summary>A reusable endpoint.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.#ctor(Riptide.Transports.Udp.SocketMode,System.Int32)">
            <summary>Initializes the transport.</summary>
            <param name="mode">Whether to create an IPv4 only, IPv6 only, or dual-mode socket.</param>
            <param name="socketBufferSize">How big the socket's send and receive buffers should be.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.Poll">
            <inheritdoc cref="M:Riptide.Transports.IPeer.Poll"/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.OpenSocket(System.Net.IPAddress,System.UInt16)">
            <summary>Opens the socket and starts the transport.</summary>
            <param name="listenAddress">The IP address to bind the socket to, if any.</param>
            <param name="port">The port to bind the socket to.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.CloseSocket">
            <summary>Closes the socket and stops the transport.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.Receive">
            <summary>Polls the socket and checks if any data was received.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>Sends data to a given endpoint.</summary>
            <param name="dataBuffer">The array containing the data.</param>
            <param name="numBytes">The number of bytes in the array which should be sent.</param>
            <param name="toEndPoint">The endpoint to send the data to.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.OnDataReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>Handles received data.</summary>
            <param name="dataBuffer">A byte array containing the received data.</param>
            <param name="amount">The number of bytes in <paramref name="dataBuffer"/> used by the received data.</param>
            <param name="fromEndPoint">The endpoint from which the data was received.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpPeer.OnDisconnected(Riptide.Connection,Riptide.DisconnectReason)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Udp.UdpPeer.Disconnected"/> event.</summary>
            <param name="connection">The closed connection.</param>
            <param name="reason">The reason for the disconnection.</param>
        </member>
        <member name="T:Riptide.Transports.Udp.UdpServer">
            <summary>A server which can accept connections from <see cref="T:Riptide.Transports.Udp.UdpClient"/>s.</summary>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpServer.Connected">
            <inheritdoc/>
        </member>
        <member name="E:Riptide.Transports.Udp.UdpServer.DataReceived">
            <inheritdoc/>
        </member>
        <member name="P:Riptide.Transports.Udp.UdpServer.Port">
            <inheritdoc/>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpServer.connections">
            <summary>The currently open connections, accessible by their endpoints.</summary>
        </member>
        <member name="F:Riptide.Transports.Udp.UdpServer.listenAddress">
            <summary>The IP address to bind the socket to, if any.</summary>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.#ctor(Riptide.Transports.Udp.SocketMode,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>Initializes the transport, binding the socket to a specific IP address.</summary>
            <param name="listenAddress">The IP address to bind the socket to.</param>
            <param name="socketBufferSize">How big the socket's send and receive buffers should be.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.Start(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.HandleConnectionAttempt(System.Net.IPEndPoint)">
            <summary>Decides what to do with a connection attempt.</summary>
            <param name="fromEndPoint">The endpoint the connection attempt is coming from.</param>
            <returns>Whether or not the connection attempt was from a new connection.</returns>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.Close(Riptide.Connection)">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.OnConnected(Riptide.Connection)">
            <summary>Invokes the <see cref="E:Riptide.Transports.Udp.UdpServer.Connected"/> event.</summary>
            <param name="connection">The successfully established connection.</param>
        </member>
        <member name="M:Riptide.Transports.Udp.UdpServer.OnDataReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Utils.Bitfield">
            <summary>Provides functionality for managing and manipulating a collection of bits.</summary>
        </member>
        <member name="P:Riptide.Utils.Bitfield.First8">
            <summary>The first 8 bits stored in the bitfield.</summary>
        </member>
        <member name="P:Riptide.Utils.Bitfield.First16">
            <summary>The first 16 bits stored in the bitfield.</summary>
        </member>
        <member name="F:Riptide.Utils.Bitfield.SegmentSize">
            <summary>The number of bits which fit into a single segment.</summary>
        </member>
        <member name="F:Riptide.Utils.Bitfield.segments">
            <summary>The segments of the bitfield.</summary>
        </member>
        <member name="F:Riptide.Utils.Bitfield.isDynamicCapacity">
            <summary>Whether or not the bitfield's capacity should dynamically adjust when shifting.</summary>
        </member>
        <member name="F:Riptide.Utils.Bitfield.count">
            <summary>The current number of bits being stored.</summary>
        </member>
        <member name="F:Riptide.Utils.Bitfield.capacity">
            <summary>The current capacity.</summary>
        </member>
        <member name="M:Riptide.Utils.Bitfield.#ctor(System.Boolean)">
            <summary>Creates a bitfield.</summary>
            <param name="isDynamicCapacity">Whether or not the bitfield's capacity should dynamically adjust when shifting.</param>
        </member>
        <member name="M:Riptide.Utils.Bitfield.HasCapacityFor(System.Int32,System.Int32@)">
            <summary>Checks if the bitfield has capacity for the given number of bits.</summary>
            <param name="amount">The number of bits for which to check if there is capacity.</param>
            <param name="overflow">The number of bits from <paramref name="amount"/> which there is no capacity for.</param>
            <returns>Whether or not there is sufficient capacity.</returns>
        </member>
        <member name="M:Riptide.Utils.Bitfield.ShiftBy(System.Int32)">
            <summary>Shifts the bitfield by the given amount.</summary>
            <param name="amount">How much to shift by.</param>
        </member>
        <member name="M:Riptide.Utils.Bitfield.CheckAndTrimLast(System.Int32@)">
            <summary>Checks the last bit in the bitfield, and trims it if it is set to 1.</summary>
            <param name="checkedPosition">The checked bit's position in the bitfield.</param>
            <returns>Whether or not the checked bit was set.</returns>
        </member>
        <member name="M:Riptide.Utils.Bitfield.Trim">
            <summary>Trims all bits from the end of the bitfield until an unset bit is encountered.</summary>
        </member>
        <member name="M:Riptide.Utils.Bitfield.Set(System.Int32)">
            <summary>Sets the given bit to 1.</summary>
            <param name="bit">The bit to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is less than 1.</exception>
        </member>
        <member name="M:Riptide.Utils.Bitfield.IsSet(System.Int32)">
            <summary>Checks if the given bit is set to 1.</summary>
            <param name="bit">The bit to check.</param>
            <returns>Whether or not the bit is set.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is less than 1.</exception>
        </member>
        <member name="M:Riptide.Utils.Bitfield.Combine(System.UInt16)">
            <summary>Combines this bitfield with the given bits.</summary>
            <param name="other">The bits to OR into the bitfield.</param>
        </member>
        <member name="T:Riptide.Utils.ConnectionMetrics">
            <summary>Tracks and manages various metrics of a <see cref="T:Riptide.Connection"/>.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.BytesIn">
            <summary>The total number of bytes received across all send modes since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including those in duplicate and, in
            the case of notify messages, out-of-order packets. Does <i>not</i> include packet header bytes, which may vary by transport.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.BytesOut">
            <summary>The total number of bytes sent across all send modes since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including those in automatic resends.
            Does <i>not</i> include packet header bytes, which may vary by transport.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.MessagesIn">
            <summary>The total number of messages received across all send modes since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including duplicate and out-of-order notify messages.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.MessagesOut">
            <summary>The total number of messages sent across all send modes since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including automatic resends.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.UnreliableBytesIn">
            <summary>The total number of bytes received in unreliable messages since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call. Does <i>not</i> include packet header bytes, which may vary by transport.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.UnreliableBytesOut">
            <summary>The total number of bytes sent in unreliable messages since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call. Does <i>not</i> include packet header bytes, which may vary by transport.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.UnreliableIn">
            <summary>The number of unreliable messages received since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.UnreliableOut">
            <summary>The number of unreliable messages sent since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.NotifyBytesIn">
            <summary>The total number of bytes received in notify messages since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including those in duplicate and out-of-order packets.
            Does <i>not</i> include packet header bytes, which may vary by transport.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.NotifyBytesOut">
            <summary>The total number of bytes sent in notify messages since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call. Does <i>not</i> include packet header bytes, which may vary by transport.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.NotifyIn">
            <summary>The number of notify messages received since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including duplicate and out-of-order ones.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.NotifyOut">
            <summary>The number of notify messages sent since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.NotifyDiscarded">
            <summary>The number of duplicate or out-of-order notify messages which were received, but discarded (not handled) since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.NotifyLost">
            <summary>The number of notify messages lost since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.NotifyDelivered">
            <summary>The number of notify messages delivered since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.RollingNotifyLost">
            <summary>The number of notify messages lost of the last 64 notify messages to be lost or delivered.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.RollingNotifyDelivered">
            <summary>The number of notify messages delivered of the last 64 notify messages to be lost or delivered.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.RollingNotifyLossRate">
            <summary>The loss rate (0-1) among the last 64 notify messages.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.ReliableBytesIn">
            <summary>The total number of bytes received in reliable messages since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including those in duplicate packets.
            Does <i>not</i> include packet header bytes, which may vary by transport.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.ReliableBytesOut">
            <summary>The total number of bytes sent in reliable messages since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including those in automatic resends.
            Does <i>not</i> include packet header bytes, which may vary by transport.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.ReliableIn">
            <summary>The number of reliable messages received since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including duplicates.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.ReliableOut">
            <summary>The number of reliable messages sent since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call, including automatic resends (each resend adds to this value).</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.ReliableDiscarded">
            <summary>The number of duplicate reliable messages which were received, but discarded (and not handled) since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call.</summary>
        </member>
        <member name="P:Riptide.Utils.ConnectionMetrics.ReliableUniques">
            <summary>The number of unique reliable messages sent since the last <see cref="M:Riptide.Utils.ConnectionMetrics.Reset"/> call.
            A message only counts towards this the first time it is sent—subsequent resends are not counted.</summary>
        </member>
        <member name="F:Riptide.Utils.ConnectionMetrics.RollingReliableSends">
            <summary>The number of send attempts that were required to deliver recent reliable messages.</summary>
        </member>
        <member name="F:Riptide.Utils.ConnectionMetrics.ULongLeftBit">
            <summary>The left-most bit of a <see cref="T:System.UInt64"/>, used to store the oldest value in the <see cref="F:Riptide.Utils.ConnectionMetrics.notifyLossTracker"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.ConnectionMetrics.notifyLossTracker">
            <summary>Which recent notify messages were lost. Each bit corresponds to a message.</summary>
        </member>
        <member name="F:Riptide.Utils.ConnectionMetrics.notifyBufferCount">
            <summary>How many of the <see cref="F:Riptide.Utils.ConnectionMetrics.notifyLossTracker"/>'s bits are in use.</summary>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.#ctor">
            <summary>Initializes metrics.</summary>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.Reset">
            <summary>Resets all non-rolling metrics to 0.</summary>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.ReceivedUnreliable(System.Int32)">
            <summary>Updates the metrics associated with receiving an unreliable message.</summary>
            <param name="byteCount">The number of bytes that were received.</param>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.SentUnreliable(System.Int32)">
            <summary>Updates the metrics associated with sending an unreliable message.</summary>
            <param name="byteCount">The number of bytes that were sent.</param>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.ReceivedNotify(System.Int32)">
            <summary>Updates the metrics associated with receiving a notify message.</summary>
            <param name="byteCount">The number of bytes that were received.</param>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.SentNotify(System.Int32)">
            <summary>Updates the metrics associated with sending a notify message.</summary>
            <param name="byteCount">The number of bytes that were sent.</param>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.DeliveredNotify">
            <summary>Updates the metrics associated with delivering a notify message.</summary>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.LostNotify">
            <summary>Updates the metrics associated with losing a notify message.</summary>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.ReceivedReliable(System.Int32)">
            <summary>Updates the metrics associated with receiving a reliable message.</summary>
            <param name="byteCount">The number of bytes that were received.</param>
        </member>
        <member name="M:Riptide.Utils.ConnectionMetrics.SentReliable(System.Int32)">
            <summary>Updates the metrics associated with sending a reliable message.</summary>
            <param name="byteCount">The number of bytes that were sent.</param>
        </member>
        <member name="T:Riptide.Utils.Converter">
            <summary>Provides functionality for converting bits and bytes to various value types and vice versa.</summary>
        </member>
        <member name="F:Riptide.Utils.Converter.BitsPerByte">
            <summary>The number of bits in a byte.</summary>
        </member>
        <member name="F:Riptide.Utils.Converter.BitsPerULong">
            <summary>The number of bits in a ulong.</summary>
        </member>
        <member name="M:Riptide.Utils.Converter.ZigZagEncode(System.Int32)">
            <summary>Zig zag encodes <paramref name="value"/>.</summary>
            <param name="value">The value to encode.</param>
            <returns>The zig zag-encoded value.</returns>
            <remarks>Zig zag encoding allows small negative numbers to be represented as small positive numbers. All positive numbers are doubled and become even numbers,
            while all negative numbers become positive odd numbers. In contrast, simply casting a negative value to its unsigned counterpart would result in a large positive
            number which uses the high bit, rendering compression via <see cref="M:Riptide.Message.AddVarULong(System.UInt64)"/> and <see cref="M:Riptide.Message.GetVarULong"/> ineffective.</remarks>
        </member>
        <member name="M:Riptide.Utils.Converter.ZigZagEncode(System.Int64)">
            <inheritdoc cref="M:Riptide.Utils.Converter.ZigZagEncode(System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.ZigZagDecode(System.Int32)">
            <summary>Zig zag decodes <paramref name="value"/>.</summary>
            <param name="value">The value to decode.</param>
            <returns>The zig zag-decoded value.</returns>
            <inheritdoc cref="M:Riptide.Utils.Converter.ZigZagEncode(System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.ZigZagDecode(System.Int64)">
            <inheritdoc cref="M:Riptide.Utils.Converter.ZigZagDecode(System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.SetBits(System.Byte,System.Int32,System.Byte[],System.Int32)">
            <summary>Takes <paramref name="amount"/> bits from <paramref name="bitfield"/> and writes them into <paramref name="array"/>, starting at <paramref name="startBit"/>.</summary>
            <param name="bitfield">The bitfield from which to write the bits into the array.</param>
            <param name="amount">The number of bits to write.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The bit position in the array at which to start writing.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.SetBits(System.UInt16,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.SetBits(System.Byte,System.Int32,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.SetBits(System.UInt32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.SetBits(System.Byte,System.Int32,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.SetBits(System.UInt64,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.SetBits(System.Byte,System.Int32,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.SetBits(System.UInt64,System.Int32,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.SetBits(System.Byte,System.Int32,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.Byte@)">
            <summary>Starting at <paramref name="startBit"/>, reads <paramref name="amount"/> bits from <paramref name="array"/> into <paramref name="bitfield"/>.</summary>
            <param name="amount">The number of bits to read.</param>
            <param name="array">The array to read the bits from.</param>
            <param name="startBit">The bit position in the array at which to start reading.</param>
            <param name="bitfield">The bitfield into which to write the bits from the array.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.UInt16@)">
            <inheritdoc cref="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.UInt32@)">
            <inheritdoc cref="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.UInt64@)">
            <inheritdoc cref="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.GetBits(System.Int32,System.UInt64[],System.Int32,System.Byte@)">
            <inheritdoc cref="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.GetBits(System.Int32,System.UInt64[],System.Int32,System.UInt16@)">
            <inheritdoc cref="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.GetBits(System.Int32,System.UInt64[],System.Int32,System.UInt32@)">
            <inheritdoc cref="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.GetBits(System.Int32,System.UInt64[],System.Int32,System.UInt64@)">
            <inheritdoc cref="M:Riptide.Utils.Converter.GetBits(System.Int32,System.Byte[],System.Int32,System.Byte@)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.SByteToBits(System.SByte,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 8 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.SByte"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.SByteToBits(System.SByte,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.SByteToBits(System.SByte,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.ByteToBits(System.Byte,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 8 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.Byte"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ByteToBits(System.Byte,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.ByteToBits(System.Byte,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.SByteFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 8 bits at <paramref name="startBit"/> in <paramref name="array"/> to an <see cref="T:System.SByte"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.SByteFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.SByteFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.ByteFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 8 bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.Byte"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ByteFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.ByteFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.BoolToBit(System.Boolean,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to a bit and writes it into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.Boolean"/> to convert.</param>
            <param name="array">The array to write the bit into.</param>
            <param name="startBit">The position in the array at which to write the bit.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.BoolToBit(System.Boolean,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.BoolToBit(System.Boolean,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.BoolFromBit(System.Byte[],System.Int32)">
            <summary>Converts the bit at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.Boolean"/>.</summary>
            <param name="array">The array to convert the bit from.</param>
            <param name="startBit">The position in the array from which to read the bit.</param>
            <returns>The converted <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.BoolFromBit(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.BoolFromBit(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.FromShort(System.Int16,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int16"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int16"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.FromUShort(System.UInt16,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt16"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt16"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToShort(System.Byte[],System.Int32)">
            <summary>Converts the 2 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int16"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ToUShort(System.Byte[],System.Int32)">
            <summary>Converts the 2 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt16"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ShortToBits(System.Int16,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 16 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.Int16"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ShortToBits(System.Int16,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.ShortToBits(System.Int16,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.UShortToBits(System.UInt16,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 16 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.UInt16"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.UShortToBits(System.UInt16,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.UShortToBits(System.UInt16,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.ShortFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 16 bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.Int16"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ShortFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.ShortFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.UShortFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 16 bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.UInt16"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.UShortFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.UShortFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.FromInt(System.Int32,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int32"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.FromUInt(System.UInt32,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt32"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt32"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToInt(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int32"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ToUInt(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt32"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.IntToBits(System.Int32,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 32 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.IntToBits(System.Int32,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.IntToBits(System.Int32,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.UIntToBits(System.UInt32,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 32 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.UInt32"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.UIntToBits(System.UInt32,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.UIntToBits(System.UInt32,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.IntFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 32 bits at <paramref name="startBit"/> in <paramref name="array"/> to an <see cref="T:System.Int32"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.IntFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.IntFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.UIntFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 32 bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.UInt32"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.UIntFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.UIntFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.FromLong(System.Int64,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Int64"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Int64"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.FromULong(System.UInt64,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.UInt64"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.UInt64"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToLong(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Int64"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ToULong(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.UInt64"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.LongToBits(System.Int64,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 64 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.Int64"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.LongToBits(System.Int64,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.LongToBits(System.Int64,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.ULongToBits(System.UInt64,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 64 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.UInt64"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ULongToBits(System.UInt64,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.ULongToBits(System.UInt64,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.LongFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 64 bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.Int64"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.LongFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.LongFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.ULongFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 64 bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.UInt64"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.ULongFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.ULongFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.ToBits(System.UInt64,System.Int32,System.UInt64[],System.Int32)">
            <summary>Converts <paramref name="value"/> to <paramref name="valueSize"/> bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.
            Meant for values which fit into a <see cref="T:System.UInt64"/>, not for <see cref="T:System.UInt64"/>s themselves.</summary>
            <param name="value">The value to convert.</param>
            <param name="valueSize">The size in bits of the value being converted.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.FromBits(System.Int32,System.UInt64[],System.Int32)">
            <summary>Converts the <paramref name="valueSize"/> bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.UInt64"/>.
            Meant for values which fit into a <see cref="T:System.UInt64"/>, not for <see cref="T:System.UInt64"/>s themselves.</summary>
            <param name="valueSize">The size in bits of the value being converted.</param>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.FromFloat(System.Single,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Single"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Single"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToFloat(System.Byte[],System.Int32)">
            <summary>Converts the 4 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Single"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.FloatToBits(System.Single,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 32 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.Single"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.FloatToBits(System.Single,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.FloatToBits(System.Single,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.FloatFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 32 bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.Single"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.FloatFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.FloatFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.FromDouble(System.Double,System.Byte[],System.Int32)">
            <summary>Converts a given <see cref="T:System.Double"/> to bytes and writes them into the given array.</summary>
            <param name="value">The <see cref="T:System.Double"/> to convert.</param>
            <param name="array">The array to write the bytes into.</param>
            <param name="startIndex">The position in the array at which to write the bytes.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.ToDouble(System.Byte[],System.Int32)">
            <summary>Converts the 8 bytes in the array at <paramref name="startIndex"/> to a <see cref="T:System.Double"/>.</summary>
            <param name="array">The array to read the bytes from.</param>
            <param name="startIndex">The position in the array at which to read the bytes.</param>
            <returns>The converted <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.DoubleToBits(System.Double,System.Byte[],System.Int32)">
            <summary>Converts <paramref name="value"/> to 64 bits and writes them into <paramref name="array"/> at <paramref name="startBit"/>.</summary>
            <param name="value">The <see cref="T:System.Double"/> to convert.</param>
            <param name="array">The array to write the bits into.</param>
            <param name="startBit">The position in the array at which to write the bits.</param>
        </member>
        <member name="M:Riptide.Utils.Converter.DoubleToBits(System.Double,System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.DoubleToBits(System.Double,System.Byte[],System.Int32)"/>
        </member>
        <member name="M:Riptide.Utils.Converter.DoubleFromBits(System.Byte[],System.Int32)">
            <summary>Converts the 64 bits at <paramref name="startBit"/> in <paramref name="array"/> to a <see cref="T:System.Double"/>.</summary>
            <param name="array">The array to convert the bits from.</param>
            <param name="startBit">The position in the array from which to read the bits.</param>
            <returns>The converted <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Converter.DoubleFromBits(System.UInt64[],System.Int32)">
            <inheritdoc cref="M:Riptide.Utils.Converter.DoubleFromBits(System.Byte[],System.Int32)"/>
        </member>
        <member name="T:Riptide.Utils.DelayedEvent">
            <summary>Executes an action when invoked.</summary>
        </member>
        <member name="M:Riptide.Utils.DelayedEvent.Invoke">
            <summary>Executes the action.</summary>
        </member>
        <member name="T:Riptide.Utils.ResendEvent">
            <summary>Resends a <see cref="T:Riptide.PendingMessage"/> when invoked.</summary>
        </member>
        <member name="F:Riptide.Utils.ResendEvent.message">
            <summary>The message to resend.</summary>
        </member>
        <member name="F:Riptide.Utils.ResendEvent.initiatedAtTime">
            <summary>The time at which the resend event was queued.</summary>
        </member>
        <member name="M:Riptide.Utils.ResendEvent.#ctor(Riptide.PendingMessage,System.Int64)">
            <summary>Initializes the event.</summary>
            <param name="message">The message to resend.</param>
            <param name="initiatedAtTime">The time at which the resend event was queued.</param>
        </member>
        <member name="M:Riptide.Utils.ResendEvent.Invoke">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Utils.HeartbeatEvent">
            <summary>Executes a heartbeat when invoked.</summary>
        </member>
        <member name="F:Riptide.Utils.HeartbeatEvent.peer">
            <summary>The peer whose heart to beat.</summary>
        </member>
        <member name="M:Riptide.Utils.HeartbeatEvent.#ctor(Riptide.Peer)">
            <summary>Initializes the event.</summary>
            <param name="peer">The peer whose heart to beat.</param>
        </member>
        <member name="M:Riptide.Utils.HeartbeatEvent.Invoke">
            <inheritdoc/>
        </member>
        <member name="T:Riptide.Utils.Extensions">
            <summary>Contains extension methods for various classes.</summary>
        </member>
        <member name="M:Riptide.Utils.Extensions.ToStringBasedOnIPFormat(System.Net.IPEndPoint)">
            <summary>Takes the <see cref="T:System.Net.IPEndPoint"/>'s IP address and port number and converts it to a string, accounting for whether the address is an IPv4 or IPv6 address.</summary>
            <returns>A string containing the IP address and port number of the endpoint.</returns>
        </member>
        <member name="T:Riptide.Utils.Helper">
            <summary>Contains miscellaneous helper methods.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.DCNeverConnected">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.NeverConnected"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.DCTransportError">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.TransportError"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.DCTimedOut">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.TimedOut"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.DCKicked">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.Kicked"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.DCServerStopped">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.ServerStopped"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.DCDisconnected">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.Disconnected"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.DCPoorConnection">
            <summary>The text to log when disconnected due to <see cref="F:Riptide.DisconnectReason.PoorConnection"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.UnknownReason">
            <summary>The text to log when disconnected or rejected due to an unknown reason.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.CRNoConnection">
            <summary>The text to log when the connection failed due to <see cref="F:Riptide.RejectReason.NoConnection"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.CRAlreadyConnected">
            <summary>The text to log when the connection failed due to <see cref="F:Riptide.RejectReason.AlreadyConnected"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.CRServerFull">
            <summary>The text to log when the connection failed due to <see cref="F:Riptide.RejectReason.ServerFull"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.CRRejected">
            <summary>The text to log when the connection failed due to <see cref="F:Riptide.RejectReason.Rejected"/>.</summary>
        </member>
        <member name="F:Riptide.Utils.Helper.CRCustom">
            <summary>The text to log when the connection failed due to <see cref="F:Riptide.RejectReason.Custom"/>.</summary>
        </member>
        <member name="M:Riptide.Utils.Helper.CorrectForm(System.Int32,System.String,System.String)">
            <summary>Determines whether <paramref name="singular"/> or <paramref name="plural"/> form should be used based on the <paramref name="amount"/>.</summary>
            <param name="amount">The amount that <paramref name="singular"/> and <paramref name="plural"/> refer to.</param>
            <param name="singular">The singular form.</param>
            <param name="plural">The plural form.</param>
            <returns><paramref name="singular"/> if <paramref name="amount"/> is 1; otherwise <paramref name="plural"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Helper.GetSequenceGap(System.UInt16,System.UInt16)">
            <summary>Calculates the signed gap between sequence IDs, accounting for wrapping.</summary>
            <param name="seqId1">The new sequence ID.</param>
            <param name="seqId2">The previous sequence ID.</param>
            <returns>The signed gap between the two given sequence IDs. A positive gap means <paramref name="seqId1"/> is newer than <paramref name="seqId2"/>. A negative gap means <paramref name="seqId1"/> is older than <paramref name="seqId2"/>.</returns>
        </member>
        <member name="M:Riptide.Utils.Helper.GetReasonString(Riptide.DisconnectReason)">
            <summary>Retrieves the appropriate reason string for the given <see cref="T:Riptide.DisconnectReason"/>.</summary>
            <param name="forReason">The <see cref="T:Riptide.DisconnectReason"/> to retrieve the string for.</param>
            <returns>The appropriate reason string.</returns>
        </member>
        <member name="M:Riptide.Utils.Helper.GetReasonString(Riptide.RejectReason)">
            <summary>Retrieves the appropriate reason string for the given <see cref="T:Riptide.RejectReason"/>.</summary>
            <param name="forReason">The <see cref="T:Riptide.RejectReason"/> to retrieve the string for.</param>
            <returns>The appropriate reason string.</returns>
        </member>
        <member name="T:Riptide.Utils.PriorityQueue`2">
            <summary>Represents a collection of items that have a value and a priority. On dequeue, the item with the lowest priority value is removed.</summary>
            <typeparam name="TElement">Specifies the type of elements in the queue.</typeparam>
            <typeparam name="TPriority">Specifies the type of priority associated with enqueued elements.</typeparam>
        </member>
        <member name="P:Riptide.Utils.PriorityQueue`2.Count">
            <summary>Gets the number of elements contained in the <see cref="T:Riptide.Utils.PriorityQueue`2"/>.</summary>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Riptide.Utils.PriorityQueue`2"/> class.</summary>
            <param name="capacity">Initial capacity to allocate for the underlying heap array.</param>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`1},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Riptide.Utils.PriorityQueue`2"/> class with the specified custom priority comparer.</summary>
            <param name="comparer">Custom comparer dictating the ordering of elements.</param>
            <param name="capacity">Initial capacity to allocate for the underlying heap array.</param>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>Adds the specified element and associated priority to the <see cref="T:Riptide.Utils.PriorityQueue`2"/>.</summary>
            <param name="element">The element to add.</param>
            <param name="priority">The priority with which to associate the new element.</param>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.Dequeue">
            <summary>Removes and returns the lowest priority element.</summary>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.TryDequeue(`0@,`1@)">
            <summary>Removes the lowest priority element from the <see cref="T:Riptide.Utils.PriorityQueue`2"/> and copies it and its associated priority to the <paramref name="element"/> and <paramref name="priority"/> arguments.</summary>
            <param name="element">When this method returns, contains the removed element.</param>
            <param name="priority">When this method returns, contains the priority associated with the removed element.</param>
            <returns>true if the element is successfully removed; false if the <see cref="T:Riptide.Utils.PriorityQueue`2"/> is empty.</returns>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.Peek">
            <summary>Returns the lowest priority element.</summary>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.PeekPriority">
            <summary>Returns the priority of the lowest priority element.</summary>
        </member>
        <member name="M:Riptide.Utils.PriorityQueue`2.Clear">
            <summary>Removes all elements from the <see cref="T:Riptide.Utils.PriorityQueue`2"/>.</summary>
        </member>
        <member name="T:Riptide.Utils.LogType">
            <summary>Defines log message types.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.Debug">
            <summary>Logs that are used for investigation during development.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.Info">
            <summary>Logs that provide general information about application flow.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.Warning">
            <summary>Logs that highlight abnormal or unexpected events in the application flow.</summary>
        </member>
        <member name="F:Riptide.Utils.LogType.Error">
            <summary>Logs that highlight problematic events in the application flow which will cause unexpected behavior if not planned for.</summary>
        </member>
        <member name="T:Riptide.Utils.RiptideLogger">
            <summary>Provides functionality for logging messages.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsDebugLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.Debug"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsInfoLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.Info"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsWarningLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.Warning"/> messages will be logged.</summary>
        </member>
        <member name="P:Riptide.Utils.RiptideLogger.IsErrorLoggingEnabled">
            <summary>Whether or not <see cref="F:Riptide.Utils.LogType.Error"/> messages will be logged.</summary>
        </member>
        <member name="T:Riptide.Utils.RiptideLogger.LogMethod">
            <summary>Encapsulates a method used to log messages.</summary>
            <param name="log">The message to log.</param>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.logMethods">
            <summary>Log methods, accessible by their <see cref="T:Riptide.Utils.LogType"/></summary>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.includeTimestamps">
            <summary>Whether or not to include timestamps when logging messages.</summary>
        </member>
        <member name="F:Riptide.Utils.RiptideLogger.timestampFormat">
            <summary>The format to use for timestamps.</summary>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Initialize(Riptide.Utils.RiptideLogger.LogMethod,System.Boolean,System.String)">
            <summary>Initializes <see cref="T:Riptide.Utils.RiptideLogger"/> with all log types enabled.</summary>
            <param name="logMethod">The method to use when logging all types of messages.</param>
            <param name="includeTimestamps">Whether or not to include timestamps when logging messages.</param>
            <param name="timestampFormat">The format to use for timestamps.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Initialize(Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,Riptide.Utils.RiptideLogger.LogMethod,System.Boolean,System.String)">
            <summary>Initializes <see cref="T:Riptide.Utils.RiptideLogger"/> with the supplied log methods.</summary>
            <param name="debugMethod">The method to use when logging debug messages. Set to <see langword="null"/> to disable debug logs.</param>
            <param name="infoMethod">The method to use when logging info messages. Set to <see langword="null"/> to disable info logs.</param>
            <param name="warningMethod">The method to use when logging warning messages. Set to <see langword="null"/> to disable warning logs.</param>
            <param name="errorMethod">The method to use when logging error messages. Set to <see langword="null"/> to disable error logs.</param>
            <param name="includeTimestamps">Whether or not to include timestamps when logging messages.</param>
            <param name="timestampFormat">The format to use for timestamps.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.EnableLoggingFor(Riptide.Utils.LogType,Riptide.Utils.RiptideLogger.LogMethod)">
            <summary>Enables logging for messages of the given <see cref="T:Riptide.Utils.LogType"/>.</summary>
            <param name="logType">The type of message to enable logging for.</param>
            <param name="logMethod">The method to use when logging this type of message.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.DisableLoggingFor(Riptide.Utils.LogType)">
            <summary>Disables logging for messages of the given <see cref="T:Riptide.Utils.LogType"/>.</summary>
            <param name="logType">The type of message to enable logging for.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Log(Riptide.Utils.LogType,System.String)">
            <summary>Logs a message.</summary>
            <param name="logType">The type of log message that is being logged.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.Log(Riptide.Utils.LogType,System.String,System.String)">
            <summary>Logs a message.</summary>
            <param name="logType">The type of log message that is being logged.</param>
            <param name="logName">Who is logging this message.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Riptide.Utils.RiptideLogger.GetTimestamp(System.DateTime)">
            <summary>Converts a <see cref="T:System.DateTime"/> object to a formatted timestamp string.</summary>
            <param name="time">The time to format.</param>
            <returns>The formatted timestamp.</returns>
        </member>
        <member name="T:Riptide.Utils.RollingStat">
            <summary>Represents a rolling series of numbers.</summary>
        </member>
        <member name="F:Riptide.Utils.RollingStat.index">
            <summary>The position in the array of the latest item.</summary>
        </member>
        <member name="F:Riptide.Utils.RollingStat.slotsFilled">
            <summary>How many of the array's slots are in use.</summary>
        </member>
        <member name="F:Riptide.Utils.RollingStat.mean">
            <inheritdoc cref="P:Riptide.Utils.RollingStat.Mean"/>
        </member>
        <member name="F:Riptide.Utils.RollingStat.sumOfSquares">
            <summary>The sum of the mean subtracted from each value in the array.</summary>
        </member>
        <member name="F:Riptide.Utils.RollingStat.array">
            <summary>The array used to store the values.</summary>
        </member>
        <member name="P:Riptide.Utils.RollingStat.Mean">
            <summary>The mean of the stat's values.</summary>
        </member>
        <member name="P:Riptide.Utils.RollingStat.Variance">
            <summary>The variance of the stat's values.</summary>
        </member>
        <member name="P:Riptide.Utils.RollingStat.StandardDev">
            <summary>The standard deviation of the stat's values.</summary>
        </member>
        <member name="M:Riptide.Utils.RollingStat.#ctor(System.Int32)">
            <summary>Initializes the stat.</summary>
            <param name="sampleSize">The number of values to store.</param>
        </member>
        <member name="M:Riptide.Utils.RollingStat.Add(System.Double)">
            <summary>Adds a new value to the stat.</summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Riptide.Utils.RollingStat.ToString">
            <inheritdoc/>
        </member>
    </members>
</doc>
